{"ast":null,"code":"import { useContext, useEffect } from \"react\";\nimport MapContext from \"../Map/MapContext\";\nimport OLVectorLayer from \"ol/layer/Vector\";\nimport { Vector as VectorSource } from 'ol/source';\nimport { transformExtent } from 'ol/proj';\nimport OSMXML from 'ol/format/OSMXML';\nimport { bbox as bboxStrategy } from 'ol/loadingstrategy';\n\nconst VectorLayer = ({\n  style,\n  zIndex = 1\n}) => {\n  const {\n    map\n  } = useContext(MapContext);\n  let source = new VectorSource({\n    format: new OSMXML(),\n    loader: function (extent, resolution, projection) {\n      var epsg4326Extent = transformExtent(extent, projection, 'EPSG:4326');\n      var client = new XMLHttpRequest();\n      client.open('POST', 'https://z.overpass-api.de/api/interprete');\n      client.addEventListener('load', function () {\n        var features = new OSMXML().readFeatures(client.responseText, {\n          featureProjection: map.getView().getProjection()\n        });\n        source.addFeatures(features);\n      });\n      var extended_load_percentage = 0.02;\n      var stringExtent = epsg4326Extent[1] - epsg4326Extent[1] * extended_load_percentage + ',' + (epsg4326Extent[0] * extended_load_percentage + epsg4326Extent[0]) + ',' + (epsg4326Extent[3] * extended_load_percentage + epsg4326Extent[3]) + ',' + (epsg4326Extent[2] - epsg4326Extent[2] * extended_load_percentage);\n      var query = \"(way[building](\" + stringExtent + \");); out meta; >; out meta qt;\";\n      client.send(query);\n    },\n    strategy: bboxStrategy\n  });\n  useEffect(() => {\n    if (!map) return;\n    let vectorLayer = new OLVectorLayer({\n      source,\n      style\n    });\n    map.addLayer(vectorLayer);\n    vectorLayer.setZIndex(zIndex);\n    return () => {\n      if (map) {\n        map.removeLayer(vectorLayer);\n      }\n    };\n  }, [map]);\n  return null;\n};\n\nexport default VectorLayer;","map":{"version":3,"sources":["/home/enrique/projects/prueba/src/Layers/VectorLayer.js"],"names":["useContext","useEffect","MapContext","OLVectorLayer","Vector","VectorSource","transformExtent","OSMXML","bbox","bboxStrategy","VectorLayer","style","zIndex","map","source","format","loader","extent","resolution","projection","epsg4326Extent","client","XMLHttpRequest","open","addEventListener","features","readFeatures","responseText","featureProjection","getView","getProjection","addFeatures","extended_load_percentage","stringExtent","query","send","strategy","vectorLayer","addLayer","setZIndex","removeLayer"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,SAArB,QAAsC,OAAtC;AACA,OAAOC,UAAP,MAAuB,mBAAvB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,SAASC,MAAM,IAAIC,YAAnB,QAAuC,WAAvC;AACA,SAASC,eAAT,QAAgC,SAAhC;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,SAASC,IAAI,IAAIC,YAAjB,QAAqC,oBAArC;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,MAAM,GAAG;AAAlB,CAAD,KAA2B;AAC9C,QAAM;AAAEC,IAAAA;AAAF,MAAUb,UAAU,CAACE,UAAD,CAA1B;AAEA,MAAIY,MAAM,GAAG,IAAIT,YAAJ,CAAiB;AAC7BU,IAAAA,MAAM,EAAE,IAAIR,MAAJ,EADqB;AAE7BS,IAAAA,MAAM,EAAE,UAAUC,MAAV,EAAkBC,UAAlB,EAA8BC,UAA9B,EAA0C;AACjD,UAAIC,cAAc,GAAGd,eAAe,CAACW,MAAD,EAASE,UAAT,EAAqB,WAArB,CAApC;AACA,UAAIE,MAAM,GAAG,IAAIC,cAAJ,EAAb;AACAD,MAAAA,MAAM,CAACE,IAAP,CAAY,MAAZ,EAAoB,0CAApB;AACAF,MAAAA,MAAM,CAACG,gBAAP,CAAwB,MAAxB,EAAgC,YAAY;AAC3C,YAAIC,QAAQ,GAAG,IAAIlB,MAAJ,GAAamB,YAAb,CAA0BL,MAAM,CAACM,YAAjC,EAA+C;AAC7DC,UAAAA,iBAAiB,EAAEf,GAAG,CAACgB,OAAJ,GAAcC,aAAd;AAD0C,SAA/C,CAAf;AAGAhB,QAAAA,MAAM,CAACiB,WAAP,CAAmBN,QAAnB;AACA,OALD;AAMA,UAAIO,wBAAwB,GAAG,IAA/B;AACA,UAAIC,YAAY,GAAIb,cAAc,CAAC,CAAD,CAAd,GAAoBA,cAAc,CAAC,CAAD,CAAd,GAAoBY,wBAAzC,GAAqE,GAArE,IAA4EZ,cAAc,CAAC,CAAD,CAAd,GAAoBY,wBAApB,GAA+CZ,cAAc,CAAC,CAAD,CAAzI,IAAgJ,GAAhJ,IACjBA,cAAc,CAAC,CAAD,CAAd,GAAoBY,wBAApB,GAA+CZ,cAAc,CAAC,CAAD,CAD5C,IACmD,GADnD,IAC0DA,cAAc,CAAC,CAAD,CAAd,GAAoBA,cAAc,CAAC,CAAD,CAAd,GAAoBY,wBADlG,CAAnB;AAEA,UAAIE,KAAK,GAAG,oBAAoBD,YAApB,GAAmC,gCAA/C;AACAZ,MAAAA,MAAM,CAACc,IAAP,CAAYD,KAAZ;AACA,KAjB4B;AAkB7BE,IAAAA,QAAQ,EAAE3B;AAlBmB,GAAjB,CAAb;AAuBAR,EAAAA,SAAS,CAAC,MAAM;AACf,QAAI,CAACY,GAAL,EAAU;AAEV,QAAIwB,WAAW,GAAG,IAAIlC,aAAJ,CAAkB;AACnCW,MAAAA,MADmC;AAEnCH,MAAAA;AAFmC,KAAlB,CAAlB;AAKAE,IAAAA,GAAG,CAACyB,QAAJ,CAAaD,WAAb;AACAA,IAAAA,WAAW,CAACE,SAAZ,CAAsB3B,MAAtB;AAEA,WAAO,MAAM;AACZ,UAAIC,GAAJ,EAAS;AACRA,QAAAA,GAAG,CAAC2B,WAAJ,CAAgBH,WAAhB;AACA;AACD,KAJD;AAKA,GAhBQ,EAgBN,CAACxB,GAAD,CAhBM,CAAT;AAkBA,SAAO,IAAP;AACA,CA7CD;;AA+CA,eAAeH,WAAf","sourcesContent":["import { useContext, useEffect } from \"react\";\nimport MapContext from \"../Map/MapContext\";\nimport OLVectorLayer from \"ol/layer/Vector\";\nimport { Vector as VectorSource } from 'ol/source';\nimport { transformExtent } from 'ol/proj';\nimport OSMXML from 'ol/format/OSMXML';\nimport { bbox as bboxStrategy } from 'ol/loadingstrategy';\n\nconst VectorLayer = ({ style, zIndex = 1 }) => {\n\tconst { map } = useContext(MapContext);\n\n\tlet source = new VectorSource({\n\t\tformat: new OSMXML(),\n\t\tloader: function (extent, resolution, projection) {\n\t\t\tvar epsg4326Extent = transformExtent(extent, projection, 'EPSG:4326');\n\t\t\tvar client = new XMLHttpRequest();\n\t\t\tclient.open('POST', 'https://z.overpass-api.de/api/interprete');\n\t\t\tclient.addEventListener('load', function () {\n\t\t\t\tvar features = new OSMXML().readFeatures(client.responseText, {\n\t\t\t\t\tfeatureProjection: map.getView().getProjection(),\n\t\t\t\t});\n\t\t\t\tsource.addFeatures(features);\n\t\t\t});\n\t\t\tvar extended_load_percentage = 0.02;\n\t\t\tvar stringExtent = (epsg4326Extent[1] - epsg4326Extent[1] * extended_load_percentage) + ',' + (epsg4326Extent[0] * extended_load_percentage + epsg4326Extent[0]) + ',' +\n\t\t\t\t(epsg4326Extent[3] * extended_load_percentage + epsg4326Extent[3]) + ',' + (epsg4326Extent[2] - epsg4326Extent[2] * extended_load_percentage);\n\t\t\tvar query = \"(way[building](\" + stringExtent + \");); out meta; >; out meta qt;\"\n\t\t\tclient.send(query);\n\t\t},\n\t\tstrategy: bboxStrategy,\n\n\t});\n\n\n\tuseEffect(() => {\n\t\tif (!map) return;\n\n\t\tlet vectorLayer = new OLVectorLayer({\n\t\t\tsource,\n\t\t\tstyle\n\t\t});\n\n\t\tmap.addLayer(vectorLayer);\n\t\tvectorLayer.setZIndex(zIndex);\n\n\t\treturn () => {\n\t\t\tif (map) {\n\t\t\t\tmap.removeLayer(vectorLayer);\n\t\t\t}\n\t\t};\n\t}, [map]);\n\n\treturn null;\n};\n\nexport default VectorLayer;"]},"metadata":{},"sourceType":"module"}