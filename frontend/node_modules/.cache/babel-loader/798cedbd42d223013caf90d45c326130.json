{"ast":null,"code":"import { useContext, useEffect } from \"react\";\nimport MapContext from \"../Map/MapContext\";\nimport OLVectorLayer from \"ol/layer/Vector\";\nimport { Vector as VectorSource } from 'ol/source';\nimport { transformExtent } from 'ol/proj';\nimport OSMXML from 'ol/format/OSMXML';\nimport { bbox as bboxStrategy } from 'ol/loadingstrategy';\nimport BuildingListContext from \"../Components/BuildingMenu/BuildingListContext\";\nimport { toLonLat } from 'ol/proj';\n\nconst VectorLayer = ({\n  defaultStyle,\n  highlightStyle,\n  renderZoom,\n  centerSetter,\n  zIndex = 1\n}) => {\n  const {\n    map\n  } = useContext(MapContext);\n  let [buildingList, setBuildingList] = useContext(BuildingListContext);\n  useEffect(() => {\n    if (!map) return;\n    let source = new VectorSource({\n      format: new OSMXML(),\n      loader: function (extent, resolution, projection) {\n        var epsg4326Extent = transformExtent(extent, projection, 'EPSG:4326');\n        var client = new XMLHttpRequest();\n        client.open('POST', 'https://overpass-api.de/api/interpreter');\n        client.addEventListener('load', function () {\n          var features = new OSMXML().readFeatures(client.responseText, {\n            featureProjection: map.getView().getProjection()\n          });\n          source.addFeatures(features);\n        });\n        var extended_load_percentage = 0.02;\n        var stringExtent = epsg4326Extent[1] - epsg4326Extent[1] * extended_load_percentage + ',' + (epsg4326Extent[0] * extended_load_percentage + epsg4326Extent[0]) + ',' + (epsg4326Extent[3] * extended_load_percentage + epsg4326Extent[3]) + ',' + (epsg4326Extent[2] - epsg4326Extent[2] * extended_load_percentage);\n        var query = \"(way[building](\" + stringExtent + \");); out meta; >; out meta qt;\";\n        client.send(query);\n      },\n      strategy: bboxStrategy\n    });\n    let vectorLayer = new OLVectorLayer({\n      source: source,\n      style: defaultStyle,\n      minZoom: renderZoom\n    });\n    map.addLayer(vectorLayer);\n    vectorLayer.setZIndex(zIndex);\n    return () => {\n      if (map) {\n        map.removeLayer(vectorLayer);\n      }\n    };\n  }, [map]);\n\n  function modifyBuildingListListener(e) {\n    map.forEachFeatureAtPixel(e.pixel, function (f) {\n      var keys = Object.keys(buildingList);\n      var buildingOlId = \"Building \" + f.ol_uid;\n      var selIndex = keys.indexOf(buildingOlId);\n      var buildingListClone = Object.assign({}, buildingList);\n      centerSetter(toLonLat(map.getView().getCenter()));\n\n      if (selIndex < 0) {\n        var coordinates = f.getGeometry().getInteriorPoint().getCoordinates();\n        var lonLatCoordinates = toLonLat([coordinates[0], coordinates[1]]);\n        var latitude = lonLatCoordinates[0].toFixed(4);\n        var longitude = lonLatCoordinates[1].toFixed(4);\n        var area = f.getGeometry().getArea().toFixed(2);\n        buildingListClone[buildingOlId] = {\n          'latitude': latitude,\n          'longitude': longitude,\n          'area': area,\n          'type': 'Both'\n        };\n        f.setStyle(highlightStyle);\n        setBuildingList(buildingListClone);\n      } else {\n        f.setStyle(defaultStyle);\n        delete buildingListClone[buildingOlId];\n        setBuildingList(buildingListClone);\n      }\n    });\n  }\n\n  useEffect(() => {\n    if (!map) return;\n    map.addEventListener('singleclick', modifyBuildingListListener);\n    return () => {\n      if (map) {\n        map.removeEventListener('singleclick', modifyBuildingListListener);\n      }\n    };\n  }, [map, buildingList]);\n  return null;\n};\n\nexport default VectorLayer;","map":{"version":3,"sources":["/home/enrique/projects/prueba/src/Layers/VectorLayer.js"],"names":["useContext","useEffect","MapContext","OLVectorLayer","Vector","VectorSource","transformExtent","OSMXML","bbox","bboxStrategy","BuildingListContext","toLonLat","VectorLayer","defaultStyle","highlightStyle","renderZoom","centerSetter","zIndex","map","buildingList","setBuildingList","source","format","loader","extent","resolution","projection","epsg4326Extent","client","XMLHttpRequest","open","addEventListener","features","readFeatures","responseText","featureProjection","getView","getProjection","addFeatures","extended_load_percentage","stringExtent","query","send","strategy","vectorLayer","style","minZoom","addLayer","setZIndex","removeLayer","modifyBuildingListListener","e","forEachFeatureAtPixel","pixel","f","keys","Object","buildingOlId","ol_uid","selIndex","indexOf","buildingListClone","assign","getCenter","coordinates","getGeometry","getInteriorPoint","getCoordinates","lonLatCoordinates","latitude","toFixed","longitude","area","getArea","setStyle","removeEventListener"],"mappings":"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","sourcesContent":["import { useContext, useEffect } from \"react\";\nimport MapContext from \"../Map/MapContext\";\nimport OLVectorLayer from \"ol/layer/Vector\";\nimport { Vector as VectorSource } from 'ol/source';\nimport { transformExtent } from 'ol/proj';\nimport OSMXML from 'ol/format/OSMXML';\nimport { bbox as bboxStrategy } from 'ol/loadingstrategy';\nimport BuildingListContext from \"../Components/BuildingMenu/BuildingListContext\";\nimport { toLonLat } from 'ol/proj';\n\nconst VectorLayer = ({ defaultStyle, highlightStyle, renderZoom, centerSetter, zIndex = 1 }) => {\n\tconst { map } = useContext(MapContext);\n\tlet [buildingList, setBuildingList] = useContext(BuildingListContext);\n\n\tuseEffect(() => {\n\t\tif (!map) return;\n\n\t\tlet source = new VectorSource({\n\t\t\tformat: new OSMXML(),\n\t\t\tloader: function (extent, resolution, projection) {\n\t\t\t\tvar epsg4326Extent = transformExtent(extent, projection, 'EPSG:4326');\n\t\t\t\tvar client = new XMLHttpRequest();\n\t\t\t\tclient.open('POST', 'https://overpass-api.de/api/interpreter');\n\t\t\t\tclient.addEventListener('load', function () {\n\t\t\t\t\tvar features = new OSMXML().readFeatures(client.responseText, {\n\t\t\t\t\t\tfeatureProjection: map.getView().getProjection(),\n\t\t\t\t\t});\n\t\t\t\t\tsource.addFeatures(features);\n\t\t\t\t});\n\t\t\t\tvar extended_load_percentage = 0.02;\n\t\t\t\tvar stringExtent = (epsg4326Extent[1] - epsg4326Extent[1] * extended_load_percentage) + ',' + (epsg4326Extent[0] * extended_load_percentage + epsg4326Extent[0]) + ',' +\n\t\t\t\t\t(epsg4326Extent[3] * extended_load_percentage + epsg4326Extent[3]) + ',' + (epsg4326Extent[2] - epsg4326Extent[2] * extended_load_percentage);\n\t\t\t\tvar query = \"(way[building](\" + stringExtent + \");); out meta; >; out meta qt;\"\n\t\t\t\tclient.send(query);\n\t\t\t},\n\t\t\tstrategy: bboxStrategy,\n\n\t\t});\n\n\t\tlet vectorLayer = new OLVectorLayer({\n\t\t\tsource: source,\n\t\t\tstyle: defaultStyle,\n\t\t\tminZoom: renderZoom\n\t\t});\n\n\t\tmap.addLayer(vectorLayer);\n\t\tvectorLayer.setZIndex(zIndex);\n\n\t\treturn () => {\n\t\t\tif (map) {\n\t\t\t\tmap.removeLayer(vectorLayer);\n\t\t\t}\n\t\t};\n\t}, [map]);\n\n\n\tfunction modifyBuildingListListener(e) {\n\t\tmap.forEachFeatureAtPixel(e.pixel, function (f) {\n\t\t\tvar keys = Object.keys(buildingList);\n\t\t\tvar buildingOlId = \"Building \" + f.ol_uid;\n\t\t\tvar selIndex = keys.indexOf(buildingOlId);\n\t\t\tvar buildingListClone = Object.assign({}, buildingList);\n\t\t\tcenterSetter(toLonLat(map.getView().getCenter()));\n\t\t\tif (selIndex < 0) {\n\t\t\t\tvar coordinates = f.getGeometry().getInteriorPoint().getCoordinates();\n\t\t\t\tvar lonLatCoordinates = toLonLat([coordinates[0], coordinates[1]]);\n\t\t\t\tvar latitude = lonLatCoordinates[0].toFixed(4);\n\t\t\t\tvar longitude = lonLatCoordinates[1].toFixed(4);\n\t\t\t\tvar area = f.getGeometry().getArea().toFixed(2);\n\t\t\t\tbuildingListClone[buildingOlId] = { 'latitude': latitude, 'longitude': longitude, 'area': area, 'type': 'Both' };\n\t\t\t\tf.setStyle(highlightStyle);\n\t\t\t\tsetBuildingList(buildingListClone);\n\t\t\t} else {\n\t\t\t\tf.setStyle(defaultStyle);\n\t\t\t\tdelete buildingListClone[buildingOlId]\n\t\t\t\tsetBuildingList(buildingListClone);\n\n\t\t\t}\n\t\t});\n\n\t}\n\n\tuseEffect(() => {\n\t\tif (!map) return;\n\t\tmap.addEventListener('singleclick', modifyBuildingListListener);\n\t\treturn () => {\n\t\t\tif (map) {\n\t\t\t\tmap.removeEventListener('singleclick', modifyBuildingListListener);\n\t\t\t}\n\t\t};\n\t}, [map, buildingList]);\n\n\treturn null;\n};\n\n\nexport default VectorLayer;"]},"metadata":{},"sourceType":"module"}