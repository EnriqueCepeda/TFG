{"ast":null,"code":"var _jsxFileName = \"/home/enrique/projects/prueba/src/Map/Map.js\";\nimport \"./Map.css\";\nimport React, { useRef, useState, useEffect } from \"react\";\nimport MapContext from \"./MapContext\";\nimport { View as olView, Map as olMap } from \"ol\";\nimport { Box } from \"@material-ui/core\";\nimport { makeStyles } from '@material-ui/core/styles';\nconst useStyles = makeStyles(() => ({\n  olMap: {\n    minWidth: '600px',\n    minHeight: '500px',\n    marginRight: '10px',\n    height: \"100%\",\n    width: \"70%\",\n    flex: 7\n  },\n  sizeAvatar: {\n    height: 30,\n    width: 30,\n    marginLeft: 10,\n    marginRight: 5\n  }\n}));\n\nconst Map = ({\n  children,\n  zoom,\n  center\n}) => {\n  const mapRef = useRef();\n  const [map, setMap] = useState(null); // on component mount\n\n  useEffect(() => {\n    let options = {\n      view: new olView({\n        zoom,\n        center\n      }),\n      layers: [],\n      controls: [],\n      overlays: []\n    };\n    let mapObject = new olMap(options);\n    mapObject.setTarget(mapRef.current);\n    setMap(mapObject);\n    return () => mapObject.setTarget(undefined);\n  }, []); // zoom change handler\n\n  useEffect(() => {\n    if (!map) return;\n    map.getView().setZoom(zoom);\n  }, [zoom]); // center change handler\n\n  useEffect(() => {\n    if (!map) return;\n    map.getView().setCenter(center);\n  }, [center]);\n  return /*#__PURE__*/React.createElement(MapContext.Provider, {\n    value: {\n      map\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    ref: mapRef,\n    className: \"ol-map\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 4\n    }\n  }, children));\n};\n\nexport default Map;","map":{"version":3,"sources":["/home/enrique/projects/prueba/src/Map/Map.js"],"names":["React","useRef","useState","useEffect","MapContext","View","olView","Map","olMap","Box","makeStyles","useStyles","minWidth","minHeight","marginRight","height","width","flex","sizeAvatar","marginLeft","children","zoom","center","mapRef","map","setMap","options","view","layers","controls","overlays","mapObject","setTarget","current","undefined","getView","setZoom","setCenter"],"mappings":";AAAA,OAAO,WAAP;AACA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,IAAI,IAAIC,MAAjB,EAAyBC,GAAG,IAAIC,KAAhC,QAA6C,IAA7C;AACA,SAASC,GAAT,QAAoB,mBAApB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AAEA,MAAMC,SAAS,GAAGD,UAAU,CAAC,OAAO;AACnCF,EAAAA,KAAK,EAAE;AACNI,IAAAA,QAAQ,EAAE,OADJ;AAENC,IAAAA,SAAS,EAAE,OAFL;AAGNC,IAAAA,WAAW,EAAE,MAHP;AAINC,IAAAA,MAAM,EAAE,MAJF;AAKNC,IAAAA,KAAK,EAAE,KALD;AAMNC,IAAAA,IAAI,EAAE;AANA,GAD4B;AASnCC,EAAAA,UAAU,EAAE;AACXH,IAAAA,MAAM,EAAE,EADG;AAEXC,IAAAA,KAAK,EAAE,EAFI;AAGXG,IAAAA,UAAU,EAAE,EAHD;AAIXL,IAAAA,WAAW,EAAE;AAJF;AATuB,CAAP,CAAD,CAA5B;;AAiBA,MAAMP,GAAG,GAAG,CAAC;AAAEa,EAAAA,QAAF;AAAYC,EAAAA,IAAZ;AAAkBC,EAAAA;AAAlB,CAAD,KAAgC;AAC3C,QAAMC,MAAM,GAAGtB,MAAM,EAArB;AACA,QAAM,CAACuB,GAAD,EAAMC,MAAN,IAAgBvB,QAAQ,CAAC,IAAD,CAA9B,CAF2C,CAK3C;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACf,QAAIuB,OAAO,GAAG;AACbC,MAAAA,IAAI,EAAE,IAAIrB,MAAJ,CAAW;AAAEe,QAAAA,IAAF;AAAQC,QAAAA;AAAR,OAAX,CADO;AAEbM,MAAAA,MAAM,EAAE,EAFK;AAGbC,MAAAA,QAAQ,EAAE,EAHG;AAIbC,MAAAA,QAAQ,EAAE;AAJG,KAAd;AAMA,QAAIC,SAAS,GAAG,IAAIvB,KAAJ,CAAUkB,OAAV,CAAhB;AACAK,IAAAA,SAAS,CAACC,SAAV,CAAoBT,MAAM,CAACU,OAA3B;AACAR,IAAAA,MAAM,CAACM,SAAD,CAAN;AAEA,WAAO,MAAMA,SAAS,CAACC,SAAV,CAAoBE,SAApB,CAAb;AACA,GAZQ,EAYN,EAZM,CAAT,CAN2C,CAoB3C;;AACA/B,EAAAA,SAAS,CAAC,MAAM;AACf,QAAI,CAACqB,GAAL,EAAU;AAEVA,IAAAA,GAAG,CAACW,OAAJ,GAAcC,OAAd,CAAsBf,IAAtB;AACA,GAJQ,EAIN,CAACA,IAAD,CAJM,CAAT,CArB2C,CA2B3C;;AACAlB,EAAAA,SAAS,CAAC,MAAM;AACf,QAAI,CAACqB,GAAL,EAAU;AAEVA,IAAAA,GAAG,CAACW,OAAJ,GAAcE,SAAd,CAAwBf,MAAxB;AACA,GAJQ,EAIN,CAACA,MAAD,CAJM,CAAT;AAMA,sBACC,oBAAC,UAAD,CAAY,QAAZ;AAAqB,IAAA,KAAK,EAAE;AAAEE,MAAAA;AAAF,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC,oBAAC,GAAD;AAAK,IAAA,GAAG,EAAED,MAAV;AAAkB,IAAA,SAAS,EAAC,QAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACEH,QADF,CADD,CADD;AAOA,CAzCD;;AA2CA,eAAeb,GAAf","sourcesContent":["import \"./Map.css\"\nimport React, { useRef, useState, useEffect } from \"react\"\nimport MapContext from \"./MapContext\";\nimport { View as olView, Map as olMap } from \"ol\";\nimport { Box } from \"@material-ui/core\"\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(() => ({\n\tolMap: {\n\t\tminWidth: '600px',\n\t\tminHeight: '500px',\n\t\tmarginRight: '10px',\n\t\theight: \"100%\",\n\t\twidth: \"70%\",\n\t\tflex: 7,\n\t},\n\tsizeAvatar: {\n\t\theight: 30,\n\t\twidth: 30,\n\t\tmarginLeft: 10,\n\t\tmarginRight: 5\n\t},\n}));\n\nconst Map = ({ children, zoom, center }) => {\n\tconst mapRef = useRef();\n\tconst [map, setMap] = useState(null);\n\n\n\t// on component mount\n\tuseEffect(() => {\n\t\tlet options = {\n\t\t\tview: new olView({ zoom, center }),\n\t\t\tlayers: [],\n\t\t\tcontrols: [],\n\t\t\toverlays: []\n\t\t};\n\t\tlet mapObject = new olMap(options);\n\t\tmapObject.setTarget(mapRef.current);\n\t\tsetMap(mapObject);\n\n\t\treturn () => mapObject.setTarget(undefined);\n\t}, []);\n\n\t// zoom change handler\n\tuseEffect(() => {\n\t\tif (!map) return;\n\n\t\tmap.getView().setZoom(zoom);\n\t}, [zoom]);\n\n\t// center change handler\n\tuseEffect(() => {\n\t\tif (!map) return;\n\n\t\tmap.getView().setCenter(center)\n\t}, [center])\n\n\treturn (\n\t\t<MapContext.Provider value={{ map }}>\n\t\t\t<Box ref={mapRef} className=\"ol-map\">\n\t\t\t\t{children}\n\t\t\t</Box>\n\t\t</MapContext.Provider>\n\t)\n}\n\nexport default Map;"]},"metadata":{},"sourceType":"module"}