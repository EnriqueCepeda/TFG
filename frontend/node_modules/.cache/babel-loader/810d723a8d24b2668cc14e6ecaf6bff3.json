{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/source/Raster\n */\n\n\nimport Disposable from '../Disposable.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport ImageCanvas from '../ImageCanvas.js';\nimport ImageLayer from '../layer/Image.js';\nimport ImageSource from './Image.js';\nimport Source from './Source.js';\nimport SourceState from './State.js';\nimport TileLayer from '../layer/Tile.js';\nimport TileQueue from '../TileQueue.js';\nimport TileSource from './Tile.js';\nimport { assign } from '../obj.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport { create as createTransform } from '../transform.js';\nimport { equals, getCenter, getHeight, getWidth } from '../extent.js';\nvar hasImageData = true;\n\ntry {\n  new ImageData(10, 10);\n} catch (_) {\n  hasImageData = false;\n}\n\nvar context = document.createElement('canvas').getContext('2d');\n/**\n * @param {Uint8ClampedArray} data Image data.\n * @param {number} width Number of columns.\n * @param {number} height Number of rows.\n * @return {ImageData} Image data.\n */\n\nexport function newImageData(data, width, height) {\n  if (hasImageData) {\n    return new ImageData(data, width, height);\n  } else {\n    var imageData = context.createImageData(width, height);\n    imageData.data.set(data);\n    return imageData;\n  }\n}\n/* istanbul ignore next */\n\n/**\n * Create a function for running operations.  This function is serialized for\n * use in a worker.\n * @param {function(Array, Object):*} operation The operation.\n * @return {function(Object):ArrayBuffer} A function that takes an object with\n * buffers, meta, imageOps, width, and height properties and returns an array\n * buffer.\n */\n\nfunction createMinion(operation) {\n  var workerHasImageData = true;\n\n  try {\n    new ImageData(10, 10);\n  } catch (_) {\n    workerHasImageData = false;\n  }\n\n  function newWorkerImageData(data, width, height) {\n    if (workerHasImageData) {\n      return new ImageData(data, width, height);\n    } else {\n      return {\n        data: data,\n        width: width,\n        height: height\n      };\n    }\n  }\n\n  return function (data) {\n    // bracket notation for minification support\n    var buffers = data['buffers'];\n    var meta = data['meta'];\n    var imageOps = data['imageOps'];\n    var width = data['width'];\n    var height = data['height'];\n    var numBuffers = buffers.length;\n    var numBytes = buffers[0].byteLength;\n    var output, b;\n\n    if (imageOps) {\n      var images = new Array(numBuffers);\n\n      for (b = 0; b < numBuffers; ++b) {\n        images[b] = newWorkerImageData(new Uint8ClampedArray(buffers[b]), width, height);\n      }\n\n      output = operation(images, meta).data;\n    } else {\n      output = new Uint8ClampedArray(numBytes);\n      var arrays = new Array(numBuffers);\n      var pixels = new Array(numBuffers);\n\n      for (b = 0; b < numBuffers; ++b) {\n        arrays[b] = new Uint8ClampedArray(buffers[b]);\n        pixels[b] = [0, 0, 0, 0];\n      }\n\n      for (var i = 0; i < numBytes; i += 4) {\n        for (var j = 0; j < numBuffers; ++j) {\n          var array = arrays[j];\n          pixels[j][0] = array[i];\n          pixels[j][1] = array[i + 1];\n          pixels[j][2] = array[i + 2];\n          pixels[j][3] = array[i + 3];\n        }\n\n        var pixel = operation(pixels, meta);\n        output[i] = pixel[0];\n        output[i + 1] = pixel[1];\n        output[i + 2] = pixel[2];\n        output[i + 3] = pixel[3];\n      }\n    }\n\n    return output.buffer;\n  };\n}\n/**\n * Create a worker for running operations.\n * @param {Object} config Configuration.\n * @param {function(MessageEvent): void} onMessage Called with a message event.\n * @return {Worker} The worker.\n */\n\n\nfunction createWorker(config, onMessage) {\n  var lib = Object.keys(config.lib || {}).map(function (name) {\n    return 'var ' + name + ' = ' + config.lib[name].toString() + ';';\n  });\n  var lines = lib.concat(['var __minion__ = (' + createMinion.toString() + ')(', config.operation.toString(), ');', 'self.addEventListener(\"message\", function(event) {', '  var buffer = __minion__(event.data);', '  self.postMessage({buffer: buffer, meta: event.data.meta}, [buffer]);', '});']);\n  var blob = new Blob(lines, {\n    type: 'text/javascript'\n  });\n  var source = URL.createObjectURL(blob);\n  var worker = new Worker(source);\n  worker.addEventListener('message', onMessage);\n  return worker;\n}\n/**\n * @typedef {Object} FauxMessageEvent\n * @property {Object} data Message data.\n */\n\n/**\n * Create a faux worker for running operations.\n * @param {ProcessorOptions} config Configuration.\n * @param {function(FauxMessageEvent): void} onMessage Called with a message event.\n * @return {Object} The faux worker.\n */\n\n\nfunction createFauxWorker(config, onMessage) {\n  var minion = createMinion(config.operation);\n  var terminated = false;\n  return {\n    postMessage: function postMessage(data) {\n      setTimeout(function () {\n        if (terminated) {\n          return;\n        }\n\n        onMessage({\n          data: {\n            buffer: minion(data),\n            meta: data['meta']\n          }\n        });\n      }, 0);\n    },\n    terminate: function terminate() {\n      terminated = true;\n    }\n  };\n}\n/**\n * @typedef {Object} ProcessorOptions\n * @property {number} threads Number of workers to spawn.\n * @property {function(Array, Object):*} operation The operation.\n * @property {Object} [lib] Functions that will be made available to operations run in a worker.\n * @property {number} queue The number of queued jobs to allow.\n * @property {boolean} [imageOps=false] Pass all the image data to the operation instead of a single pixel.\n */\n\n/**\n * @classdesc\n * A processor runs pixel or image operations in workers.\n */\n\n\nvar Processor =\n/** @class */\nfunction (_super) {\n  __extends(Processor, _super);\n  /**\n   * @param {ProcessorOptions} config Configuration.\n   */\n\n\n  function Processor(config) {\n    var _this = _super.call(this) || this;\n\n    _this._imageOps = !!config.imageOps;\n    var threads;\n\n    if (config.threads === 0) {\n      threads = 0;\n    } else if (_this._imageOps) {\n      threads = 1;\n    } else {\n      threads = config.threads || 1;\n    }\n\n    var workers = [];\n\n    if (threads) {\n      for (var i = 0; i < threads; ++i) {\n        workers[i] = createWorker(config, _this._onWorkerMessage.bind(_this, i));\n      }\n    } else {\n      workers[0] = createFauxWorker(config, _this._onWorkerMessage.bind(_this, 0));\n    }\n\n    _this._workers = workers;\n    _this._queue = [];\n    _this._maxQueueLength = config.queue || Infinity;\n    _this._running = 0;\n    _this._dataLookup = {};\n    _this._job = null;\n    return _this;\n  }\n  /**\n   * Run operation on input data.\n   * @param {Array.<Array|ImageData>} inputs Array of pixels or image data\n   *     (depending on the operation type).\n   * @param {Object} meta A user data object.  This is passed to all operations\n   *     and must be serializable.\n   * @param {function(Error, ImageData, Object): void} callback Called when work\n   *     completes.  The first argument is any error.  The second is the ImageData\n   *     generated by operations.  The third is the user data object.\n   */\n\n\n  Processor.prototype.process = function (inputs, meta, callback) {\n    this._enqueue({\n      inputs: inputs,\n      meta: meta,\n      callback: callback\n    });\n\n    this._dispatch();\n  };\n  /**\n   * Add a job to the queue.\n   * @param {Object} job The job.\n   */\n\n\n  Processor.prototype._enqueue = function (job) {\n    this._queue.push(job);\n\n    while (this._queue.length > this._maxQueueLength) {\n      this._queue.shift().callback(null, null);\n    }\n  };\n  /**\n   * Dispatch a job.\n   */\n\n\n  Processor.prototype._dispatch = function () {\n    if (this._running === 0 && this._queue.length > 0) {\n      var job = this._queue.shift();\n\n      this._job = job;\n      var width = job.inputs[0].width;\n      var height = job.inputs[0].height;\n      var buffers = job.inputs.map(function (input) {\n        return input.data.buffer;\n      });\n      var threads = this._workers.length;\n      this._running = threads;\n\n      if (threads === 1) {\n        this._workers[0].postMessage({\n          buffers: buffers,\n          meta: job.meta,\n          imageOps: this._imageOps,\n          width: width,\n          height: height\n        }, buffers);\n      } else {\n        var length_1 = job.inputs[0].data.length;\n        var segmentLength = 4 * Math.ceil(length_1 / 4 / threads);\n\n        for (var i = 0; i < threads; ++i) {\n          var offset = i * segmentLength;\n          var slices = [];\n\n          for (var j = 0, jj = buffers.length; j < jj; ++j) {\n            slices.push(buffers[i].slice(offset, offset + segmentLength));\n          }\n\n          this._workers[i].postMessage({\n            buffers: slices,\n            meta: job.meta,\n            imageOps: this._imageOps,\n            width: width,\n            height: height\n          }, slices);\n        }\n      }\n    }\n  };\n  /**\n   * Handle messages from the worker.\n   * @param {number} index The worker index.\n   * @param {MessageEvent} event The message event.\n   */\n\n\n  Processor.prototype._onWorkerMessage = function (index, event) {\n    if (this.disposed) {\n      return;\n    }\n\n    this._dataLookup[index] = event.data;\n    --this._running;\n\n    if (this._running === 0) {\n      this._resolveJob();\n    }\n  };\n  /**\n   * Resolve a job.  If there are no more worker threads, the processor callback\n   * will be called.\n   */\n\n\n  Processor.prototype._resolveJob = function () {\n    var job = this._job;\n    var threads = this._workers.length;\n    var data, meta;\n\n    if (threads === 1) {\n      data = new Uint8ClampedArray(this._dataLookup[0]['buffer']);\n      meta = this._dataLookup[0]['meta'];\n    } else {\n      var length_2 = job.inputs[0].data.length;\n      data = new Uint8ClampedArray(length_2);\n      meta = new Array(length_2);\n      var segmentLength = 4 * Math.ceil(length_2 / 4 / threads);\n\n      for (var i = 0; i < threads; ++i) {\n        var buffer = this._dataLookup[i]['buffer'];\n        var offset = i * segmentLength;\n        data.set(new Uint8ClampedArray(buffer), offset);\n        meta[i] = this._dataLookup[i]['meta'];\n      }\n    }\n\n    this._job = null;\n    this._dataLookup = {};\n    job.callback(null, newImageData(data, job.inputs[0].width, job.inputs[0].height), meta);\n\n    this._dispatch();\n  };\n  /**\n   * Terminate all workers associated with the processor.\n   */\n\n\n  Processor.prototype.disposeInternal = function () {\n    for (var i = 0; i < this._workers.length; ++i) {\n      this._workers[i].terminate();\n    }\n\n    this._workers.length = 0;\n  };\n\n  return Processor;\n}(Disposable);\n\nexport { Processor };\n/**\n * A function that takes an array of input data, performs some operation, and\n * returns an array of output data.\n * For `pixel` type operations, the function will be called with an array of\n * pixels, where each pixel is an array of four numbers (`[r, g, b, a]`) in the\n * range of 0 - 255. It should return a single pixel array.\n * For `'image'` type operations, functions will be called with an array of\n * {@link ImageData https://developer.mozilla.org/en-US/docs/Web/API/ImageData}\n * and should return a single {@link ImageData\n * https://developer.mozilla.org/en-US/docs/Web/API/ImageData}.  The operations\n * are called with a second \"data\" argument, which can be used for storage.  The\n * data object is accessible from raster events, where it can be initialized in\n * \"beforeoperations\" and accessed again in \"afteroperations\".\n *\n * @typedef {function((Array<Array<number>>|Array<ImageData>), Object):\n *     (Array<number>|ImageData)} Operation\n */\n\n/**\n * @enum {string}\n */\n\nvar RasterEventType = {\n  /**\n   * Triggered before operations are run.\n   * @event module:ol/source/Raster.RasterSourceEvent#beforeoperations\n   * @api\n   */\n  BEFOREOPERATIONS: 'beforeoperations',\n\n  /**\n   * Triggered after operations are run.\n   * @event module:ol/source/Raster.RasterSourceEvent#afteroperations\n   * @api\n   */\n  AFTEROPERATIONS: 'afteroperations'\n};\n/**\n * Raster operation type. Supported values are `'pixel'` and `'image'`.\n * @enum {string}\n */\n\nvar RasterOperationType = {\n  PIXEL: 'pixel',\n  IMAGE: 'image'\n};\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Raster} instances are instances of this\n * type.\n */\n\nvar RasterSourceEvent =\n/** @class */\nfunction (_super) {\n  __extends(RasterSourceEvent, _super);\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState The frame state.\n   * @param {Object} data An object made available to operations.\n   */\n\n\n  function RasterSourceEvent(type, frameState, data) {\n    var _this = _super.call(this, type) || this;\n    /**\n     * The raster extent.\n     * @type {import(\"../extent.js\").Extent}\n     * @api\n     */\n\n\n    _this.extent = frameState.extent;\n    /**\n     * The pixel resolution (map units per pixel).\n     * @type {number}\n     * @api\n     */\n\n    _this.resolution = frameState.viewState.resolution / frameState.pixelRatio;\n    /**\n     * An object made available to all operations.  This can be used by operations\n     * as a storage object (e.g. for calculating statistics).\n     * @type {Object}\n     * @api\n     */\n\n    _this.data = data;\n    return _this;\n  }\n\n  return RasterSourceEvent;\n}(Event);\n\nexport { RasterSourceEvent };\n/**\n * @typedef {Object} Options\n * @property {Array<import(\"./Source.js\").default|import(\"../layer/Layer.js\").default>} sources Input\n * sources or layers.  For vector data, use an VectorImage layer.\n * @property {Operation} [operation] Raster operation.\n * The operation will be called with data from input sources\n * and the output will be assigned to the raster source.\n * @property {Object} [lib] Functions that will be made available to operations run in a worker.\n * @property {number} [threads] By default, operations will be run in a single worker thread.\n * To avoid using workers altogether, set `threads: 0`.  For pixel operations, operations can\n * be run in multiple worker threads.  Note that there is additional overhead in\n * transferring data to multiple workers, and that depending on the user's\n * system, it may not be possible to parallelize the work.\n * @property {RasterOperationType} [operationType='pixel'] Operation type.\n * Supported values are `'pixel'` and `'image'`.  By default,\n * `'pixel'` operations are assumed, and operations will be called with an\n * array of pixels from input sources.  If set to `'image'`, operations will\n * be called with an array of ImageData objects from input sources.\n */\n\n/**\n * @classdesc\n * A source that transforms data from any number of input sources using an\n * {@link module:ol/source/Raster~Operation} function to transform input pixel values into\n * output pixel values.\n *\n * @fires module:ol/source/Raster.RasterSourceEvent\n * @api\n */\n\nvar RasterSource =\n/** @class */\nfunction (_super) {\n  __extends(RasterSource, _super);\n  /**\n   * @param {Options} options Options.\n   */\n\n\n  function RasterSource(options) {\n    var _this = _super.call(this, {\n      projection: null\n    }) || this;\n    /**\n     * @private\n     * @type {Processor}\n     */\n\n\n    _this.processor_ = null;\n    /**\n     * @private\n     * @type {RasterOperationType}\n     */\n\n    _this.operationType_ = options.operationType !== undefined ? options.operationType : RasterOperationType.PIXEL;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.threads_ = options.threads !== undefined ? options.threads : 1;\n    /**\n     * @private\n     * @type {Array<import(\"../layer/Layer.js\").default>}\n     */\n\n    _this.layers_ = createLayers(options.sources);\n\n    var changed = _this.changed.bind(_this);\n\n    for (var i = 0, ii = _this.layers_.length; i < ii; ++i) {\n      _this.layers_[i].addEventListener(EventType.CHANGE, changed);\n    }\n    /**\n     * @private\n     * @type {import(\"../TileQueue.js\").default}\n     */\n\n\n    _this.tileQueue_ = new TileQueue(function () {\n      return 1;\n    }, _this.changed.bind(_this));\n    /**\n     * The most recently requested frame state.\n     * @type {import(\"../PluggableMap.js\").FrameState}\n     * @private\n     */\n\n    _this.requestedFrameState_;\n    /**\n     * The most recently rendered image canvas.\n     * @type {import(\"../ImageCanvas.js\").default}\n     * @private\n     */\n\n    _this.renderedImageCanvas_ = null;\n    /**\n     * The most recently rendered revision.\n     * @type {number}\n     */\n\n    _this.renderedRevision_;\n    /**\n     * @private\n     * @type {import(\"../PluggableMap.js\").FrameState}\n     */\n\n    _this.frameState_ = {\n      animate: false,\n      coordinateToPixelTransform: createTransform(),\n      extent: null,\n      index: 0,\n      layerIndex: 0,\n      layerStatesArray: getLayerStatesArray(_this.layers_),\n      pixelRatio: 1,\n      pixelToCoordinateTransform: createTransform(),\n      postRenderFunctions: [],\n      size: [0, 0],\n      tileQueue: _this.tileQueue_,\n      time: Date.now(),\n      usedTiles: {},\n      viewState:\n      /** @type {import(\"../View.js\").State} */\n      {\n        rotation: 0\n      },\n      viewHints: [],\n      wantedTiles: {},\n      declutterItems: []\n    };\n\n    _this.setAttributions(function (frameState) {\n      var attributions = [];\n\n      for (var index = 0, iMax = options.sources.length; index < iMax; ++index) {\n        var sourceOrLayer = options.sources[index];\n        var source = sourceOrLayer instanceof Source ? sourceOrLayer : sourceOrLayer.getSource();\n        var attributionGetter = source.getAttributions();\n\n        if (typeof attributionGetter === 'function') {\n          var sourceAttribution = attributionGetter(frameState);\n          attributions.push.apply(attributions, sourceAttribution);\n        }\n      }\n\n      return attributions.length !== 0 ? attributions : null;\n    });\n\n    if (options.operation !== undefined) {\n      _this.setOperation(options.operation, options.lib);\n    }\n\n    return _this;\n  }\n  /**\n   * Set the operation.\n   * @param {Operation} operation New operation.\n   * @param {Object=} opt_lib Functions that will be available to operations run\n   *     in a worker.\n   * @api\n   */\n\n\n  RasterSource.prototype.setOperation = function (operation, opt_lib) {\n    if (this.processor_) {\n      this.processor_.dispose();\n    }\n\n    this.processor_ = new Processor({\n      operation: operation,\n      imageOps: this.operationType_ === RasterOperationType.IMAGE,\n      queue: 1,\n      lib: opt_lib,\n      threads: this.threads_\n    });\n    this.changed();\n  };\n  /**\n   * Update the stored frame state.\n   * @param {import(\"../extent.js\").Extent} extent The view extent (in map units).\n   * @param {number} resolution The view resolution.\n   * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n   * @return {import(\"../PluggableMap.js\").FrameState} The updated frame state.\n   * @private\n   */\n\n\n  RasterSource.prototype.updateFrameState_ = function (extent, resolution, projection) {\n    var frameState =\n    /** @type {import(\"../PluggableMap.js\").FrameState} */\n    assign({}, this.frameState_);\n    frameState.viewState =\n    /** @type {import(\"../View.js\").State} */\n    assign({}, frameState.viewState);\n    var center = getCenter(extent);\n    frameState.extent = extent.slice();\n    frameState.size[0] = Math.round(getWidth(extent) / resolution);\n    frameState.size[1] = Math.round(getHeight(extent) / resolution);\n    frameState.time = Infinity;\n    var viewState = frameState.viewState;\n    viewState.center = center;\n    viewState.projection = projection;\n    viewState.resolution = resolution;\n    return frameState;\n  };\n  /**\n   * Determine if all sources are ready.\n   * @return {boolean} All sources are ready.\n   * @private\n   */\n\n\n  RasterSource.prototype.allSourcesReady_ = function () {\n    var ready = true;\n    var source;\n\n    for (var i = 0, ii = this.layers_.length; i < ii; ++i) {\n      source = this.layers_[i].getSource();\n\n      if (source.getState() !== SourceState.READY) {\n        ready = false;\n        break;\n      }\n    }\n\n    return ready;\n  };\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../ImageCanvas.js\").default} Single image.\n   */\n\n\n  RasterSource.prototype.getImage = function (extent, resolution, pixelRatio, projection) {\n    if (!this.allSourcesReady_()) {\n      return null;\n    }\n\n    var frameState = this.updateFrameState_(extent, resolution, projection);\n    this.requestedFrameState_ = frameState; // check if we can't reuse the existing ol/ImageCanvas\n\n    if (this.renderedImageCanvas_) {\n      var renderedResolution = this.renderedImageCanvas_.getResolution();\n      var renderedExtent = this.renderedImageCanvas_.getExtent();\n\n      if (resolution !== renderedResolution || !equals(extent, renderedExtent)) {\n        this.renderedImageCanvas_ = null;\n      }\n    }\n\n    if (!this.renderedImageCanvas_ || this.getRevision() !== this.renderedRevision_) {\n      this.processSources_();\n    }\n\n    frameState.tileQueue.loadMoreTiles(16, 16);\n\n    if (frameState.animate) {\n      requestAnimationFrame(this.changed.bind(this));\n    }\n\n    return this.renderedImageCanvas_;\n  };\n  /**\n   * Start processing source data.\n   * @private\n   */\n\n\n  RasterSource.prototype.processSources_ = function () {\n    var frameState = this.requestedFrameState_;\n    var len = this.layers_.length;\n    var imageDatas = new Array(len);\n\n    for (var i = 0; i < len; ++i) {\n      frameState.layerIndex = i;\n      var imageData = getImageData(this.layers_[i], frameState);\n\n      if (imageData) {\n        imageDatas[i] = imageData;\n      } else {\n        return;\n      }\n    }\n\n    var data = {};\n    this.dispatchEvent(new RasterSourceEvent(RasterEventType.BEFOREOPERATIONS, frameState, data));\n    this.processor_.process(imageDatas, data, this.onWorkerComplete_.bind(this, frameState));\n  };\n  /**\n   * Called when pixel processing is complete.\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState The frame state.\n   * @param {Error} err Any error during processing.\n   * @param {ImageData} output The output image data.\n   * @param {Object} data The user data.\n   * @private\n   */\n\n\n  RasterSource.prototype.onWorkerComplete_ = function (frameState, err, output, data) {\n    if (err || !output) {\n      return;\n    } // do nothing if extent or resolution changed\n\n\n    var extent = frameState.extent;\n    var resolution = frameState.viewState.resolution;\n\n    if (resolution !== this.requestedFrameState_.viewState.resolution || !equals(extent, this.requestedFrameState_.extent)) {\n      return;\n    }\n\n    var context;\n\n    if (this.renderedImageCanvas_) {\n      context = this.renderedImageCanvas_.getImage().getContext('2d');\n    } else {\n      var width = Math.round(getWidth(extent) / resolution);\n      var height = Math.round(getHeight(extent) / resolution);\n      context = createCanvasContext2D(width, height);\n      this.renderedImageCanvas_ = new ImageCanvas(extent, resolution, 1, context.canvas);\n    }\n\n    context.putImageData(output, 0, 0);\n    this.changed();\n    this.renderedRevision_ = this.getRevision();\n    this.dispatchEvent(new RasterSourceEvent(RasterEventType.AFTEROPERATIONS, frameState, data));\n  };\n  /**\n   * @return {null} not implemented\n   */\n\n\n  RasterSource.prototype.getImageInternal = function () {\n    return null; // not implemented\n  };\n\n  RasterSource.prototype.disposeInternal = function () {\n    if (this.processor_) {\n      this.processor_.dispose();\n    }\n\n    _super.prototype.disposeInternal.call(this);\n  };\n\n  return RasterSource;\n}(ImageSource);\n/**\n * Clean up and unregister the worker.\n * @function\n * @api\n */\n\n\nRasterSource.prototype.dispose;\n/**\n * A reusable canvas context.\n * @type {CanvasRenderingContext2D}\n * @private\n */\n\nvar sharedContext = null;\n/**\n * Get image data from a layer.\n * @param {import(\"../layer/Layer.js\").default} layer Layer to render.\n * @param {import(\"../PluggableMap.js\").FrameState} frameState The frame state.\n * @return {ImageData} The image data.\n */\n\nfunction getImageData(layer, frameState) {\n  var renderer = layer.getRenderer();\n\n  if (!renderer) {\n    throw new Error('Unsupported layer type: ' + layer);\n  }\n\n  if (!renderer.prepareFrame(frameState)) {\n    return null;\n  }\n\n  var width = frameState.size[0];\n  var height = frameState.size[1];\n  var container = renderer.renderFrame(frameState, null);\n  var element;\n\n  if (container) {\n    element = container.firstElementChild;\n  }\n\n  if (!(element instanceof HTMLCanvasElement)) {\n    throw new Error('Unsupported rendered element: ' + element);\n  }\n\n  if (element.width === width && element.height === height) {\n    var context_1 = element.getContext('2d');\n    return context_1.getImageData(0, 0, width, height);\n  }\n\n  if (!sharedContext) {\n    sharedContext = createCanvasContext2D(width, height);\n  } else {\n    var canvas = sharedContext.canvas;\n\n    if (canvas.width !== width || canvas.height !== height) {\n      sharedContext = createCanvasContext2D(width, height);\n    } else {\n      sharedContext.clearRect(0, 0, width, height);\n    }\n  }\n\n  sharedContext.drawImage(element, 0, 0, width, height);\n  return sharedContext.getImageData(0, 0, width, height);\n}\n/**\n * Get a list of layer states from a list of layers.\n * @param {Array<import(\"../layer/Layer.js\").default>} layers Layers.\n * @return {Array<import(\"../layer/Layer.js\").State>} The layer states.\n */\n\n\nfunction getLayerStatesArray(layers) {\n  return layers.map(function (layer) {\n    return layer.getLayerState();\n  });\n}\n/**\n * Create layers for all sources.\n * @param {Array<import(\"./Source.js\").default|import(\"../layer/Layer.js\").default>} sources The sources.\n * @return {Array<import(\"../layer/Layer.js\").default>} Array of layers.\n */\n\n\nfunction createLayers(sources) {\n  var len = sources.length;\n  var layers = new Array(len);\n\n  for (var i = 0; i < len; ++i) {\n    layers[i] = createLayer(sources[i]);\n  }\n\n  return layers;\n}\n/**\n * Create a layer for the provided source.\n * @param {import(\"./Source.js\").default|import(\"../layer/Layer.js\").default} layerOrSource The layer or source.\n * @return {import(\"../layer/Layer.js\").default} The layer.\n */\n\n\nfunction createLayer(layerOrSource) {\n  // @type {import(\"../layer/Layer.js\").default}\n  var layer;\n\n  if (layerOrSource instanceof Source) {\n    if (layerOrSource instanceof TileSource) {\n      layer = new TileLayer({\n        source: layerOrSource\n      });\n    } else if (layerOrSource instanceof ImageSource) {\n      layer = new ImageLayer({\n        source: layerOrSource\n      });\n    }\n  } else {\n    layer = layerOrSource;\n  }\n\n  return layer;\n}\n\nexport default RasterSource;","map":{"version":3,"sources":["../src/source/Raster.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/source/Raster\n */\nimport Disposable from '../Disposable.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport ImageCanvas from '../ImageCanvas.js';\nimport ImageLayer from '../layer/Image.js';\nimport ImageSource from './Image.js';\nimport Source from './Source.js';\nimport SourceState from './State.js';\nimport TileLayer from '../layer/Tile.js';\nimport TileQueue from '../TileQueue.js';\nimport TileSource from './Tile.js';\nimport { assign } from '../obj.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport { create as createTransform } from '../transform.js';\nimport { equals, getCenter, getHeight, getWidth } from '../extent.js';\nvar hasImageData = true;\ntry {\n    new ImageData(10, 10);\n}\ncatch (_) {\n    hasImageData = false;\n}\nvar context = document.createElement('canvas').getContext('2d');\n/**\n * @param {Uint8ClampedArray} data Image data.\n * @param {number} width Number of columns.\n * @param {number} height Number of rows.\n * @return {ImageData} Image data.\n */\nexport function newImageData(data, width, height) {\n    if (hasImageData) {\n        return new ImageData(data, width, height);\n    }\n    else {\n        var imageData = context.createImageData(width, height);\n        imageData.data.set(data);\n        return imageData;\n    }\n}\n/* istanbul ignore next */\n/**\n * Create a function for running operations.  This function is serialized for\n * use in a worker.\n * @param {function(Array, Object):*} operation The operation.\n * @return {function(Object):ArrayBuffer} A function that takes an object with\n * buffers, meta, imageOps, width, and height properties and returns an array\n * buffer.\n */\nfunction createMinion(operation) {\n    var workerHasImageData = true;\n    try {\n        new ImageData(10, 10);\n    }\n    catch (_) {\n        workerHasImageData = false;\n    }\n    function newWorkerImageData(data, width, height) {\n        if (workerHasImageData) {\n            return new ImageData(data, width, height);\n        }\n        else {\n            return { data: data, width: width, height: height };\n        }\n    }\n    return function (data) {\n        // bracket notation for minification support\n        var buffers = data['buffers'];\n        var meta = data['meta'];\n        var imageOps = data['imageOps'];\n        var width = data['width'];\n        var height = data['height'];\n        var numBuffers = buffers.length;\n        var numBytes = buffers[0].byteLength;\n        var output, b;\n        if (imageOps) {\n            var images = new Array(numBuffers);\n            for (b = 0; b < numBuffers; ++b) {\n                images[b] = newWorkerImageData(new Uint8ClampedArray(buffers[b]), width, height);\n            }\n            output = operation(images, meta).data;\n        }\n        else {\n            output = new Uint8ClampedArray(numBytes);\n            var arrays = new Array(numBuffers);\n            var pixels = new Array(numBuffers);\n            for (b = 0; b < numBuffers; ++b) {\n                arrays[b] = new Uint8ClampedArray(buffers[b]);\n                pixels[b] = [0, 0, 0, 0];\n            }\n            for (var i = 0; i < numBytes; i += 4) {\n                for (var j = 0; j < numBuffers; ++j) {\n                    var array = arrays[j];\n                    pixels[j][0] = array[i];\n                    pixels[j][1] = array[i + 1];\n                    pixels[j][2] = array[i + 2];\n                    pixels[j][3] = array[i + 3];\n                }\n                var pixel = operation(pixels, meta);\n                output[i] = pixel[0];\n                output[i + 1] = pixel[1];\n                output[i + 2] = pixel[2];\n                output[i + 3] = pixel[3];\n            }\n        }\n        return output.buffer;\n    };\n}\n/**\n * Create a worker for running operations.\n * @param {Object} config Configuration.\n * @param {function(MessageEvent): void} onMessage Called with a message event.\n * @return {Worker} The worker.\n */\nfunction createWorker(config, onMessage) {\n    var lib = Object.keys(config.lib || {}).map(function (name) {\n        return 'var ' + name + ' = ' + config.lib[name].toString() + ';';\n    });\n    var lines = lib.concat([\n        'var __minion__ = (' + createMinion.toString() + ')(',\n        config.operation.toString(),\n        ');',\n        'self.addEventListener(\"message\", function(event) {',\n        '  var buffer = __minion__(event.data);',\n        '  self.postMessage({buffer: buffer, meta: event.data.meta}, [buffer]);',\n        '});',\n    ]);\n    var blob = new Blob(lines, { type: 'text/javascript' });\n    var source = URL.createObjectURL(blob);\n    var worker = new Worker(source);\n    worker.addEventListener('message', onMessage);\n    return worker;\n}\n/**\n * @typedef {Object} FauxMessageEvent\n * @property {Object} data Message data.\n */\n/**\n * Create a faux worker for running operations.\n * @param {ProcessorOptions} config Configuration.\n * @param {function(FauxMessageEvent): void} onMessage Called with a message event.\n * @return {Object} The faux worker.\n */\nfunction createFauxWorker(config, onMessage) {\n    var minion = createMinion(config.operation);\n    var terminated = false;\n    return {\n        postMessage: function (data) {\n            setTimeout(function () {\n                if (terminated) {\n                    return;\n                }\n                onMessage({ data: { buffer: minion(data), meta: data['meta'] } });\n            }, 0);\n        },\n        terminate: function () {\n            terminated = true;\n        },\n    };\n}\n/**\n * @typedef {Object} ProcessorOptions\n * @property {number} threads Number of workers to spawn.\n * @property {function(Array, Object):*} operation The operation.\n * @property {Object} [lib] Functions that will be made available to operations run in a worker.\n * @property {number} queue The number of queued jobs to allow.\n * @property {boolean} [imageOps=false] Pass all the image data to the operation instead of a single pixel.\n */\n/**\n * @classdesc\n * A processor runs pixel or image operations in workers.\n */\nvar Processor = /** @class */ (function (_super) {\n    __extends(Processor, _super);\n    /**\n     * @param {ProcessorOptions} config Configuration.\n     */\n    function Processor(config) {\n        var _this = _super.call(this) || this;\n        _this._imageOps = !!config.imageOps;\n        var threads;\n        if (config.threads === 0) {\n            threads = 0;\n        }\n        else if (_this._imageOps) {\n            threads = 1;\n        }\n        else {\n            threads = config.threads || 1;\n        }\n        var workers = [];\n        if (threads) {\n            for (var i = 0; i < threads; ++i) {\n                workers[i] = createWorker(config, _this._onWorkerMessage.bind(_this, i));\n            }\n        }\n        else {\n            workers[0] = createFauxWorker(config, _this._onWorkerMessage.bind(_this, 0));\n        }\n        _this._workers = workers;\n        _this._queue = [];\n        _this._maxQueueLength = config.queue || Infinity;\n        _this._running = 0;\n        _this._dataLookup = {};\n        _this._job = null;\n        return _this;\n    }\n    /**\n     * Run operation on input data.\n     * @param {Array.<Array|ImageData>} inputs Array of pixels or image data\n     *     (depending on the operation type).\n     * @param {Object} meta A user data object.  This is passed to all operations\n     *     and must be serializable.\n     * @param {function(Error, ImageData, Object): void} callback Called when work\n     *     completes.  The first argument is any error.  The second is the ImageData\n     *     generated by operations.  The third is the user data object.\n     */\n    Processor.prototype.process = function (inputs, meta, callback) {\n        this._enqueue({\n            inputs: inputs,\n            meta: meta,\n            callback: callback,\n        });\n        this._dispatch();\n    };\n    /**\n     * Add a job to the queue.\n     * @param {Object} job The job.\n     */\n    Processor.prototype._enqueue = function (job) {\n        this._queue.push(job);\n        while (this._queue.length > this._maxQueueLength) {\n            this._queue.shift().callback(null, null);\n        }\n    };\n    /**\n     * Dispatch a job.\n     */\n    Processor.prototype._dispatch = function () {\n        if (this._running === 0 && this._queue.length > 0) {\n            var job = this._queue.shift();\n            this._job = job;\n            var width = job.inputs[0].width;\n            var height = job.inputs[0].height;\n            var buffers = job.inputs.map(function (input) {\n                return input.data.buffer;\n            });\n            var threads = this._workers.length;\n            this._running = threads;\n            if (threads === 1) {\n                this._workers[0].postMessage({\n                    buffers: buffers,\n                    meta: job.meta,\n                    imageOps: this._imageOps,\n                    width: width,\n                    height: height,\n                }, buffers);\n            }\n            else {\n                var length_1 = job.inputs[0].data.length;\n                var segmentLength = 4 * Math.ceil(length_1 / 4 / threads);\n                for (var i = 0; i < threads; ++i) {\n                    var offset = i * segmentLength;\n                    var slices = [];\n                    for (var j = 0, jj = buffers.length; j < jj; ++j) {\n                        slices.push(buffers[i].slice(offset, offset + segmentLength));\n                    }\n                    this._workers[i].postMessage({\n                        buffers: slices,\n                        meta: job.meta,\n                        imageOps: this._imageOps,\n                        width: width,\n                        height: height,\n                    }, slices);\n                }\n            }\n        }\n    };\n    /**\n     * Handle messages from the worker.\n     * @param {number} index The worker index.\n     * @param {MessageEvent} event The message event.\n     */\n    Processor.prototype._onWorkerMessage = function (index, event) {\n        if (this.disposed) {\n            return;\n        }\n        this._dataLookup[index] = event.data;\n        --this._running;\n        if (this._running === 0) {\n            this._resolveJob();\n        }\n    };\n    /**\n     * Resolve a job.  If there are no more worker threads, the processor callback\n     * will be called.\n     */\n    Processor.prototype._resolveJob = function () {\n        var job = this._job;\n        var threads = this._workers.length;\n        var data, meta;\n        if (threads === 1) {\n            data = new Uint8ClampedArray(this._dataLookup[0]['buffer']);\n            meta = this._dataLookup[0]['meta'];\n        }\n        else {\n            var length_2 = job.inputs[0].data.length;\n            data = new Uint8ClampedArray(length_2);\n            meta = new Array(length_2);\n            var segmentLength = 4 * Math.ceil(length_2 / 4 / threads);\n            for (var i = 0; i < threads; ++i) {\n                var buffer = this._dataLookup[i]['buffer'];\n                var offset = i * segmentLength;\n                data.set(new Uint8ClampedArray(buffer), offset);\n                meta[i] = this._dataLookup[i]['meta'];\n            }\n        }\n        this._job = null;\n        this._dataLookup = {};\n        job.callback(null, newImageData(data, job.inputs[0].width, job.inputs[0].height), meta);\n        this._dispatch();\n    };\n    /**\n     * Terminate all workers associated with the processor.\n     */\n    Processor.prototype.disposeInternal = function () {\n        for (var i = 0; i < this._workers.length; ++i) {\n            this._workers[i].terminate();\n        }\n        this._workers.length = 0;\n    };\n    return Processor;\n}(Disposable));\nexport { Processor };\n/**\n * A function that takes an array of input data, performs some operation, and\n * returns an array of output data.\n * For `pixel` type operations, the function will be called with an array of\n * pixels, where each pixel is an array of four numbers (`[r, g, b, a]`) in the\n * range of 0 - 255. It should return a single pixel array.\n * For `'image'` type operations, functions will be called with an array of\n * {@link ImageData https://developer.mozilla.org/en-US/docs/Web/API/ImageData}\n * and should return a single {@link ImageData\n * https://developer.mozilla.org/en-US/docs/Web/API/ImageData}.  The operations\n * are called with a second \"data\" argument, which can be used for storage.  The\n * data object is accessible from raster events, where it can be initialized in\n * \"beforeoperations\" and accessed again in \"afteroperations\".\n *\n * @typedef {function((Array<Array<number>>|Array<ImageData>), Object):\n *     (Array<number>|ImageData)} Operation\n */\n/**\n * @enum {string}\n */\nvar RasterEventType = {\n    /**\n     * Triggered before operations are run.\n     * @event module:ol/source/Raster.RasterSourceEvent#beforeoperations\n     * @api\n     */\n    BEFOREOPERATIONS: 'beforeoperations',\n    /**\n     * Triggered after operations are run.\n     * @event module:ol/source/Raster.RasterSourceEvent#afteroperations\n     * @api\n     */\n    AFTEROPERATIONS: 'afteroperations',\n};\n/**\n * Raster operation type. Supported values are `'pixel'` and `'image'`.\n * @enum {string}\n */\nvar RasterOperationType = {\n    PIXEL: 'pixel',\n    IMAGE: 'image',\n};\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Raster} instances are instances of this\n * type.\n */\nvar RasterSourceEvent = /** @class */ (function (_super) {\n    __extends(RasterSourceEvent, _super);\n    /**\n     * @param {string} type Type.\n     * @param {import(\"../PluggableMap.js\").FrameState} frameState The frame state.\n     * @param {Object} data An object made available to operations.\n     */\n    function RasterSourceEvent(type, frameState, data) {\n        var _this = _super.call(this, type) || this;\n        /**\n         * The raster extent.\n         * @type {import(\"../extent.js\").Extent}\n         * @api\n         */\n        _this.extent = frameState.extent;\n        /**\n         * The pixel resolution (map units per pixel).\n         * @type {number}\n         * @api\n         */\n        _this.resolution = frameState.viewState.resolution / frameState.pixelRatio;\n        /**\n         * An object made available to all operations.  This can be used by operations\n         * as a storage object (e.g. for calculating statistics).\n         * @type {Object}\n         * @api\n         */\n        _this.data = data;\n        return _this;\n    }\n    return RasterSourceEvent;\n}(Event));\nexport { RasterSourceEvent };\n/**\n * @typedef {Object} Options\n * @property {Array<import(\"./Source.js\").default|import(\"../layer/Layer.js\").default>} sources Input\n * sources or layers.  For vector data, use an VectorImage layer.\n * @property {Operation} [operation] Raster operation.\n * The operation will be called with data from input sources\n * and the output will be assigned to the raster source.\n * @property {Object} [lib] Functions that will be made available to operations run in a worker.\n * @property {number} [threads] By default, operations will be run in a single worker thread.\n * To avoid using workers altogether, set `threads: 0`.  For pixel operations, operations can\n * be run in multiple worker threads.  Note that there is additional overhead in\n * transferring data to multiple workers, and that depending on the user's\n * system, it may not be possible to parallelize the work.\n * @property {RasterOperationType} [operationType='pixel'] Operation type.\n * Supported values are `'pixel'` and `'image'`.  By default,\n * `'pixel'` operations are assumed, and operations will be called with an\n * array of pixels from input sources.  If set to `'image'`, operations will\n * be called with an array of ImageData objects from input sources.\n */\n/**\n * @classdesc\n * A source that transforms data from any number of input sources using an\n * {@link module:ol/source/Raster~Operation} function to transform input pixel values into\n * output pixel values.\n *\n * @fires module:ol/source/Raster.RasterSourceEvent\n * @api\n */\nvar RasterSource = /** @class */ (function (_super) {\n    __extends(RasterSource, _super);\n    /**\n     * @param {Options} options Options.\n     */\n    function RasterSource(options) {\n        var _this = _super.call(this, {\n            projection: null,\n        }) || this;\n        /**\n         * @private\n         * @type {Processor}\n         */\n        _this.processor_ = null;\n        /**\n         * @private\n         * @type {RasterOperationType}\n         */\n        _this.operationType_ =\n            options.operationType !== undefined\n                ? options.operationType\n                : RasterOperationType.PIXEL;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.threads_ = options.threads !== undefined ? options.threads : 1;\n        /**\n         * @private\n         * @type {Array<import(\"../layer/Layer.js\").default>}\n         */\n        _this.layers_ = createLayers(options.sources);\n        var changed = _this.changed.bind(_this);\n        for (var i = 0, ii = _this.layers_.length; i < ii; ++i) {\n            _this.layers_[i].addEventListener(EventType.CHANGE, changed);\n        }\n        /**\n         * @private\n         * @type {import(\"../TileQueue.js\").default}\n         */\n        _this.tileQueue_ = new TileQueue(function () {\n            return 1;\n        }, _this.changed.bind(_this));\n        /**\n         * The most recently requested frame state.\n         * @type {import(\"../PluggableMap.js\").FrameState}\n         * @private\n         */\n        _this.requestedFrameState_;\n        /**\n         * The most recently rendered image canvas.\n         * @type {import(\"../ImageCanvas.js\").default}\n         * @private\n         */\n        _this.renderedImageCanvas_ = null;\n        /**\n         * The most recently rendered revision.\n         * @type {number}\n         */\n        _this.renderedRevision_;\n        /**\n         * @private\n         * @type {import(\"../PluggableMap.js\").FrameState}\n         */\n        _this.frameState_ = {\n            animate: false,\n            coordinateToPixelTransform: createTransform(),\n            extent: null,\n            index: 0,\n            layerIndex: 0,\n            layerStatesArray: getLayerStatesArray(_this.layers_),\n            pixelRatio: 1,\n            pixelToCoordinateTransform: createTransform(),\n            postRenderFunctions: [],\n            size: [0, 0],\n            tileQueue: _this.tileQueue_,\n            time: Date.now(),\n            usedTiles: {},\n            viewState: /** @type {import(\"../View.js\").State} */ ({\n                rotation: 0,\n            }),\n            viewHints: [],\n            wantedTiles: {},\n            declutterItems: [],\n        };\n        _this.setAttributions(function (frameState) {\n            var attributions = [];\n            for (var index = 0, iMax = options.sources.length; index < iMax; ++index) {\n                var sourceOrLayer = options.sources[index];\n                var source = sourceOrLayer instanceof Source\n                    ? sourceOrLayer\n                    : sourceOrLayer.getSource();\n                var attributionGetter = source.getAttributions();\n                if (typeof attributionGetter === 'function') {\n                    var sourceAttribution = attributionGetter(frameState);\n                    attributions.push.apply(attributions, sourceAttribution);\n                }\n            }\n            return attributions.length !== 0 ? attributions : null;\n        });\n        if (options.operation !== undefined) {\n            _this.setOperation(options.operation, options.lib);\n        }\n        return _this;\n    }\n    /**\n     * Set the operation.\n     * @param {Operation} operation New operation.\n     * @param {Object=} opt_lib Functions that will be available to operations run\n     *     in a worker.\n     * @api\n     */\n    RasterSource.prototype.setOperation = function (operation, opt_lib) {\n        if (this.processor_) {\n            this.processor_.dispose();\n        }\n        this.processor_ = new Processor({\n            operation: operation,\n            imageOps: this.operationType_ === RasterOperationType.IMAGE,\n            queue: 1,\n            lib: opt_lib,\n            threads: this.threads_,\n        });\n        this.changed();\n    };\n    /**\n     * Update the stored frame state.\n     * @param {import(\"../extent.js\").Extent} extent The view extent (in map units).\n     * @param {number} resolution The view resolution.\n     * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n     * @return {import(\"../PluggableMap.js\").FrameState} The updated frame state.\n     * @private\n     */\n    RasterSource.prototype.updateFrameState_ = function (extent, resolution, projection) {\n        var frameState = /** @type {import(\"../PluggableMap.js\").FrameState} */ (assign({}, this.frameState_));\n        frameState.viewState = /** @type {import(\"../View.js\").State} */ (assign({}, frameState.viewState));\n        var center = getCenter(extent);\n        frameState.extent = extent.slice();\n        frameState.size[0] = Math.round(getWidth(extent) / resolution);\n        frameState.size[1] = Math.round(getHeight(extent) / resolution);\n        frameState.time = Infinity;\n        var viewState = frameState.viewState;\n        viewState.center = center;\n        viewState.projection = projection;\n        viewState.resolution = resolution;\n        return frameState;\n    };\n    /**\n     * Determine if all sources are ready.\n     * @return {boolean} All sources are ready.\n     * @private\n     */\n    RasterSource.prototype.allSourcesReady_ = function () {\n        var ready = true;\n        var source;\n        for (var i = 0, ii = this.layers_.length; i < ii; ++i) {\n            source = this.layers_[i].getSource();\n            if (source.getState() !== SourceState.READY) {\n                ready = false;\n                break;\n            }\n        }\n        return ready;\n    };\n    /**\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @param {number} resolution Resolution.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {import(\"../ImageCanvas.js\").default} Single image.\n     */\n    RasterSource.prototype.getImage = function (extent, resolution, pixelRatio, projection) {\n        if (!this.allSourcesReady_()) {\n            return null;\n        }\n        var frameState = this.updateFrameState_(extent, resolution, projection);\n        this.requestedFrameState_ = frameState;\n        // check if we can't reuse the existing ol/ImageCanvas\n        if (this.renderedImageCanvas_) {\n            var renderedResolution = this.renderedImageCanvas_.getResolution();\n            var renderedExtent = this.renderedImageCanvas_.getExtent();\n            if (resolution !== renderedResolution ||\n                !equals(extent, renderedExtent)) {\n                this.renderedImageCanvas_ = null;\n            }\n        }\n        if (!this.renderedImageCanvas_ ||\n            this.getRevision() !== this.renderedRevision_) {\n            this.processSources_();\n        }\n        frameState.tileQueue.loadMoreTiles(16, 16);\n        if (frameState.animate) {\n            requestAnimationFrame(this.changed.bind(this));\n        }\n        return this.renderedImageCanvas_;\n    };\n    /**\n     * Start processing source data.\n     * @private\n     */\n    RasterSource.prototype.processSources_ = function () {\n        var frameState = this.requestedFrameState_;\n        var len = this.layers_.length;\n        var imageDatas = new Array(len);\n        for (var i = 0; i < len; ++i) {\n            frameState.layerIndex = i;\n            var imageData = getImageData(this.layers_[i], frameState);\n            if (imageData) {\n                imageDatas[i] = imageData;\n            }\n            else {\n                return;\n            }\n        }\n        var data = {};\n        this.dispatchEvent(new RasterSourceEvent(RasterEventType.BEFOREOPERATIONS, frameState, data));\n        this.processor_.process(imageDatas, data, this.onWorkerComplete_.bind(this, frameState));\n    };\n    /**\n     * Called when pixel processing is complete.\n     * @param {import(\"../PluggableMap.js\").FrameState} frameState The frame state.\n     * @param {Error} err Any error during processing.\n     * @param {ImageData} output The output image data.\n     * @param {Object} data The user data.\n     * @private\n     */\n    RasterSource.prototype.onWorkerComplete_ = function (frameState, err, output, data) {\n        if (err || !output) {\n            return;\n        }\n        // do nothing if extent or resolution changed\n        var extent = frameState.extent;\n        var resolution = frameState.viewState.resolution;\n        if (resolution !== this.requestedFrameState_.viewState.resolution ||\n            !equals(extent, this.requestedFrameState_.extent)) {\n            return;\n        }\n        var context;\n        if (this.renderedImageCanvas_) {\n            context = this.renderedImageCanvas_.getImage().getContext('2d');\n        }\n        else {\n            var width = Math.round(getWidth(extent) / resolution);\n            var height = Math.round(getHeight(extent) / resolution);\n            context = createCanvasContext2D(width, height);\n            this.renderedImageCanvas_ = new ImageCanvas(extent, resolution, 1, context.canvas);\n        }\n        context.putImageData(output, 0, 0);\n        this.changed();\n        this.renderedRevision_ = this.getRevision();\n        this.dispatchEvent(new RasterSourceEvent(RasterEventType.AFTEROPERATIONS, frameState, data));\n    };\n    /**\n     * @return {null} not implemented\n     */\n    RasterSource.prototype.getImageInternal = function () {\n        return null; // not implemented\n    };\n    RasterSource.prototype.disposeInternal = function () {\n        if (this.processor_) {\n            this.processor_.dispose();\n        }\n        _super.prototype.disposeInternal.call(this);\n    };\n    return RasterSource;\n}(ImageSource));\n/**\n * Clean up and unregister the worker.\n * @function\n * @api\n */\nRasterSource.prototype.dispose;\n/**\n * A reusable canvas context.\n * @type {CanvasRenderingContext2D}\n * @private\n */\nvar sharedContext = null;\n/**\n * Get image data from a layer.\n * @param {import(\"../layer/Layer.js\").default} layer Layer to render.\n * @param {import(\"../PluggableMap.js\").FrameState} frameState The frame state.\n * @return {ImageData} The image data.\n */\nfunction getImageData(layer, frameState) {\n    var renderer = layer.getRenderer();\n    if (!renderer) {\n        throw new Error('Unsupported layer type: ' + layer);\n    }\n    if (!renderer.prepareFrame(frameState)) {\n        return null;\n    }\n    var width = frameState.size[0];\n    var height = frameState.size[1];\n    var container = renderer.renderFrame(frameState, null);\n    var element;\n    if (container) {\n        element = container.firstElementChild;\n    }\n    if (!(element instanceof HTMLCanvasElement)) {\n        throw new Error('Unsupported rendered element: ' + element);\n    }\n    if (element.width === width && element.height === height) {\n        var context_1 = element.getContext('2d');\n        return context_1.getImageData(0, 0, width, height);\n    }\n    if (!sharedContext) {\n        sharedContext = createCanvasContext2D(width, height);\n    }\n    else {\n        var canvas = sharedContext.canvas;\n        if (canvas.width !== width || canvas.height !== height) {\n            sharedContext = createCanvasContext2D(width, height);\n        }\n        else {\n            sharedContext.clearRect(0, 0, width, height);\n        }\n    }\n    sharedContext.drawImage(element, 0, 0, width, height);\n    return sharedContext.getImageData(0, 0, width, height);\n}\n/**\n * Get a list of layer states from a list of layers.\n * @param {Array<import(\"../layer/Layer.js\").default>} layers Layers.\n * @return {Array<import(\"../layer/Layer.js\").State>} The layer states.\n */\nfunction getLayerStatesArray(layers) {\n    return layers.map(function (layer) {\n        return layer.getLayerState();\n    });\n}\n/**\n * Create layers for all sources.\n * @param {Array<import(\"./Source.js\").default|import(\"../layer/Layer.js\").default>} sources The sources.\n * @return {Array<import(\"../layer/Layer.js\").default>} Array of layers.\n */\nfunction createLayers(sources) {\n    var len = sources.length;\n    var layers = new Array(len);\n    for (var i = 0; i < len; ++i) {\n        layers[i] = createLayer(sources[i]);\n    }\n    return layers;\n}\n/**\n * Create a layer for the provided source.\n * @param {import(\"./Source.js\").default|import(\"../layer/Layer.js\").default} layerOrSource The layer or source.\n * @return {import(\"../layer/Layer.js\").default} The layer.\n */\nfunction createLayer(layerOrSource) {\n    // @type {import(\"../layer/Layer.js\").default}\n    var layer;\n    if (layerOrSource instanceof Source) {\n        if (layerOrSource instanceof TileSource) {\n            layer = new TileLayer({ source: layerOrSource });\n        }\n        else if (layerOrSource instanceof ImageSource) {\n            layer = new ImageLayer({ source: layerOrSource });\n        }\n    }\n    else {\n        layer = layerOrSource;\n    }\n    return layer;\n}\nexport default RasterSource;\n//# sourceMappingURL=Raster.js.map"]},"metadata":{},"sourceType":"module"}