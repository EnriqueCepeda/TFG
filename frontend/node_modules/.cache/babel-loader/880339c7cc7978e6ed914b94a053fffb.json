{"ast":null,"code":"/**\n * @module ol/source/ImageStatic\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport EventType from '../events/EventType.js';\nimport ImageSource, { defaultImageLoadFunction } from './Image.js';\nimport ImageState from '../ImageState.js';\nimport ImageWrapper from '../Image.js';\nimport { assign } from '../obj.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport { getHeight, getWidth, intersects } from '../extent.js';\nimport { get as getProjection } from '../proj.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {import(\"../extent.js\").Extent} [imageExtent] Extent of the image in map coordinates.\n * This is the [left, bottom, right, top] map coordinates of your image.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.\n * @property {boolean} [imageSmoothing=true] Enable image smoothing.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {import(\"../size.js\").Size} [imageSize] Size of the image in pixels. Usually the image size is auto-detected, so this\n * only needs to be set if auto-detection fails for some reason.\n * @property {string} url Image URL.\n */\n\n/**\n * @classdesc\n * A layer source for displaying a single, static image.\n * @api\n */\n\nvar Static =\n/** @class */\nfunction (_super) {\n  __extends(Static, _super);\n  /**\n   * @param {Options} options ImageStatic options.\n   */\n\n\n  function Static(options) {\n    var _this = this;\n\n    var crossOrigin = options.crossOrigin !== undefined ? options.crossOrigin : null;\n    var\n    /** @type {import(\"../Image.js\").LoadFunction} */\n    imageLoadFunction = options.imageLoadFunction !== undefined ? options.imageLoadFunction : defaultImageLoadFunction;\n    _this = _super.call(this, {\n      attributions: options.attributions,\n      imageSmoothing: options.imageSmoothing,\n      projection: getProjection(options.projection)\n    }) || this;\n    /**\n     * @private\n     * @type {string}\n     */\n\n    _this.url_ = options.url;\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n\n    _this.imageExtent_ = options.imageExtent;\n    /**\n     * @private\n     * @type {import(\"../Image.js\").default}\n     */\n\n    _this.image_ = new ImageWrapper(_this.imageExtent_, undefined, 1, _this.url_, crossOrigin, imageLoadFunction);\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n\n    _this.imageSize_ = options.imageSize ? options.imageSize : null;\n\n    _this.image_.addEventListener(EventType.CHANGE, _this.handleImageChange.bind(_this));\n\n    return _this;\n  }\n  /**\n   * Returns the image extent\n   * @return {import(\"../extent.js\").Extent} image extent.\n   * @api\n   */\n\n\n  Static.prototype.getImageExtent = function () {\n    return this.imageExtent_;\n  };\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   */\n\n\n  Static.prototype.getImageInternal = function (extent, resolution, pixelRatio, projection) {\n    if (intersects(extent, this.image_.getExtent())) {\n      return this.image_;\n    }\n\n    return null;\n  };\n  /**\n   * Return the URL used for this image source.\n   * @return {string} URL.\n   * @api\n   */\n\n\n  Static.prototype.getUrl = function () {\n    return this.url_;\n  };\n  /**\n   * @param {import(\"../events/Event.js\").default} evt Event.\n   */\n\n\n  Static.prototype.handleImageChange = function (evt) {\n    if (this.image_.getState() == ImageState.LOADED) {\n      var imageExtent = this.image_.getExtent();\n      var image = this.image_.getImage();\n      var imageWidth = void 0,\n          imageHeight = void 0;\n\n      if (this.imageSize_) {\n        imageWidth = this.imageSize_[0];\n        imageHeight = this.imageSize_[1];\n      } else {\n        imageWidth = image.width;\n        imageHeight = image.height;\n      }\n\n      var resolution = getHeight(imageExtent) / imageHeight;\n      var targetWidth = Math.ceil(getWidth(imageExtent) / resolution);\n\n      if (targetWidth != imageWidth) {\n        var context = createCanvasContext2D(targetWidth, imageHeight);\n        assign(context, this.getContextOptions());\n        var canvas = context.canvas;\n        context.drawImage(image, 0, 0, imageWidth, imageHeight, 0, 0, canvas.width, canvas.height);\n        this.image_.setImage(canvas);\n      }\n    }\n\n    _super.prototype.handleImageChange.call(this, evt);\n  };\n\n  return Static;\n}(ImageSource);\n\nexport default Static;","map":{"version":3,"sources":["../src/source/ImageStatic.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @module ol/source/ImageStatic\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport EventType from '../events/EventType.js';\nimport ImageSource, { defaultImageLoadFunction } from './Image.js';\nimport ImageState from '../ImageState.js';\nimport ImageWrapper from '../Image.js';\nimport { assign } from '../obj.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport { getHeight, getWidth, intersects } from '../extent.js';\nimport { get as getProjection } from '../proj.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {import(\"../extent.js\").Extent} [imageExtent] Extent of the image in map coordinates.\n * This is the [left, bottom, right, top] map coordinates of your image.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.\n * @property {boolean} [imageSmoothing=true] Enable image smoothing.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {import(\"../size.js\").Size} [imageSize] Size of the image in pixels. Usually the image size is auto-detected, so this\n * only needs to be set if auto-detection fails for some reason.\n * @property {string} url Image URL.\n */\n/**\n * @classdesc\n * A layer source for displaying a single, static image.\n * @api\n */\nvar Static = /** @class */ (function (_super) {\n    __extends(Static, _super);\n    /**\n     * @param {Options} options ImageStatic options.\n     */\n    function Static(options) {\n        var _this = this;\n        var crossOrigin = options.crossOrigin !== undefined ? options.crossOrigin : null;\n        var /** @type {import(\"../Image.js\").LoadFunction} */ imageLoadFunction = options.imageLoadFunction !== undefined\n            ? options.imageLoadFunction\n            : defaultImageLoadFunction;\n        _this = _super.call(this, {\n            attributions: options.attributions,\n            imageSmoothing: options.imageSmoothing,\n            projection: getProjection(options.projection),\n        }) || this;\n        /**\n         * @private\n         * @type {string}\n         */\n        _this.url_ = options.url;\n        /**\n         * @private\n         * @type {import(\"../extent.js\").Extent}\n         */\n        _this.imageExtent_ = options.imageExtent;\n        /**\n         * @private\n         * @type {import(\"../Image.js\").default}\n         */\n        _this.image_ = new ImageWrapper(_this.imageExtent_, undefined, 1, _this.url_, crossOrigin, imageLoadFunction);\n        /**\n         * @private\n         * @type {import(\"../size.js\").Size}\n         */\n        _this.imageSize_ = options.imageSize ? options.imageSize : null;\n        _this.image_.addEventListener(EventType.CHANGE, _this.handleImageChange.bind(_this));\n        return _this;\n    }\n    /**\n     * Returns the image extent\n     * @return {import(\"../extent.js\").Extent} image extent.\n     * @api\n     */\n    Static.prototype.getImageExtent = function () {\n        return this.imageExtent_;\n    };\n    /**\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @param {number} resolution Resolution.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {import(\"../Image.js\").default} Single image.\n     */\n    Static.prototype.getImageInternal = function (extent, resolution, pixelRatio, projection) {\n        if (intersects(extent, this.image_.getExtent())) {\n            return this.image_;\n        }\n        return null;\n    };\n    /**\n     * Return the URL used for this image source.\n     * @return {string} URL.\n     * @api\n     */\n    Static.prototype.getUrl = function () {\n        return this.url_;\n    };\n    /**\n     * @param {import(\"../events/Event.js\").default} evt Event.\n     */\n    Static.prototype.handleImageChange = function (evt) {\n        if (this.image_.getState() == ImageState.LOADED) {\n            var imageExtent = this.image_.getExtent();\n            var image = this.image_.getImage();\n            var imageWidth = void 0, imageHeight = void 0;\n            if (this.imageSize_) {\n                imageWidth = this.imageSize_[0];\n                imageHeight = this.imageSize_[1];\n            }\n            else {\n                imageWidth = image.width;\n                imageHeight = image.height;\n            }\n            var resolution = getHeight(imageExtent) / imageHeight;\n            var targetWidth = Math.ceil(getWidth(imageExtent) / resolution);\n            if (targetWidth != imageWidth) {\n                var context = createCanvasContext2D(targetWidth, imageHeight);\n                assign(context, this.getContextOptions());\n                var canvas = context.canvas;\n                context.drawImage(image, 0, 0, imageWidth, imageHeight, 0, 0, canvas.width, canvas.height);\n                this.image_.setImage(canvas);\n            }\n        }\n        _super.prototype.handleImageChange.call(this, evt);\n    };\n    return Static;\n}(ImageSource));\nexport default Static;\n//# sourceMappingURL=ImageStatic.js.map"]},"metadata":{},"sourceType":"module"}