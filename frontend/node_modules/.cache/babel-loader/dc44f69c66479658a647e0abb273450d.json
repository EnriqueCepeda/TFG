{"ast":null,"code":"import { useContext, useEffect } from \"react\";\nimport MapContext from \"../Map/MapContext\";\nimport OLVectorLayer from \"ol/layer/Vector\";\nimport { Vector as VectorSource } from 'ol/source';\nimport { transformExtent } from 'ol/proj';\nimport OSMXML from 'ol/format/OSMXML';\nimport { bbox as bboxStrategy } from 'ol/loadingstrategy';\nimport BuildingListContext from \"../BuildingMenu/BuildingListContext\";\n\nconst VectorLayer = ({\n  defaultStyle,\n  highlightStyle,\n  zIndex = 1\n}) => {\n  const {\n    map\n  } = useContext(MapContext);\n  let [buildingList, setBuildingList] = useContext(BuildingListContext);\n  useEffect(() => {\n    if (!map) return;\n    let source = new VectorSource({\n      format: new OSMXML(),\n      loader: function (extent, resolution, projection) {\n        var epsg4326Extent = transformExtent(extent, projection, 'EPSG:4326');\n        var client = new XMLHttpRequest();\n        client.open('POST', 'https://overpass-api.de/api/interpreter');\n        client.addEventListener('load', function () {\n          var features = new OSMXML().readFeatures(client.responseText, {\n            featureProjection: map.getView().getProjection()\n          });\n          source.addFeatures(features);\n        });\n        var extended_load_percentage = 0.02;\n        var stringExtent = epsg4326Extent[1] - epsg4326Extent[1] * extended_load_percentage + ',' + (epsg4326Extent[0] * extended_load_percentage + epsg4326Extent[0]) + ',' + (epsg4326Extent[3] * extended_load_percentage + epsg4326Extent[3]) + ',' + (epsg4326Extent[2] - epsg4326Extent[2] * extended_load_percentage);\n        var query = \"(way[building](\" + stringExtent + \");); out meta; >; out meta qt;\";\n        client.send(query);\n      },\n      strategy: bboxStrategy\n    });\n    let vectorLayer = new OLVectorLayer({\n      source: source,\n      style: defaultStyle\n    });\n    map.addLayer(vectorLayer);\n    vectorLayer.setZIndex(zIndex);\n    return () => {\n      if (map) {\n        map.removeLayer(vectorLayer);\n      }\n    };\n  }, [map]);\n  useEffect(() => {\n    if (!map) return;\n    map.on('singleclick', function (e) {\n      map.forEachFeatureAtPixel(e.pixel, function (f) {\n        var keys = Object.keys(buildingList);\n        var buildingOlId = f.ol_uid;\n        var selIndex = keys.indexOf(buildingOlId);\n        var buildingListClone = Object.assign({}, buildingList);\n\n        if (selIndex < 0) {\n          var latitude = f.getGeometry().getInteriorPoint().getCoordinates()[0];\n          var longitude = f.getGeometry().getInteriorPoint().getCoordinates()[1];\n          var area = f.getGeometry().getArea();\n          buildingListClone[buildingOlId] = {\n            'latitude': latitude,\n            'longitude': longitude,\n            'area': area\n          };\n          f.setStyle(highlightStyle);\n          setBuildingList(buildingListClone);\n        } else {\n          f.setStyle(defaultStyle);\n          delete buildingListClone[buildingOlId];\n          setBuildingList(buildingListClone);\n        }\n      });\n    });\n    return () => {\n      if (map) {\n        map.removeEventListener('singleclick');\n      }\n    };\n  }, [map, buildingList]);\n  return null;\n};\n\nexport default VectorLayer;","map":{"version":3,"sources":["/home/enrique/projects/prueba/src/Layers/VectorLayer.js"],"names":["useContext","useEffect","MapContext","OLVectorLayer","Vector","VectorSource","transformExtent","OSMXML","bbox","bboxStrategy","BuildingListContext","VectorLayer","defaultStyle","highlightStyle","zIndex","map","buildingList","setBuildingList","source","format","loader","extent","resolution","projection","epsg4326Extent","client","XMLHttpRequest","open","addEventListener","features","readFeatures","responseText","featureProjection","getView","getProjection","addFeatures","extended_load_percentage","stringExtent","query","send","strategy","vectorLayer","style","addLayer","setZIndex","removeLayer","on","e","forEachFeatureAtPixel","pixel","f","keys","Object","buildingOlId","ol_uid","selIndex","indexOf","buildingListClone","assign","latitude","getGeometry","getInteriorPoint","getCoordinates","longitude","area","getArea","setStyle","removeEventListener"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,SAArB,QAAsC,OAAtC;AACA,OAAOC,UAAP,MAAuB,mBAAvB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,SAASC,MAAM,IAAIC,YAAnB,QAAuC,WAAvC;AACA,SAASC,eAAT,QAAgC,SAAhC;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,SAASC,IAAI,IAAIC,YAAjB,QAAqC,oBAArC;AACA,OAAOC,mBAAP,MAAgC,qCAAhC;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA,YAAF;AAAgBC,EAAAA,cAAhB;AAAgCC,EAAAA,MAAM,GAAG;AAAzC,CAAD,KAAkD;AACrE,QAAM;AAAEC,IAAAA;AAAF,MAAUf,UAAU,CAACE,UAAD,CAA1B;AACA,MAAI,CAACc,YAAD,EAAeC,eAAf,IAAkCjB,UAAU,CAACU,mBAAD,CAAhD;AAGAT,EAAAA,SAAS,CAAC,MAAM;AACf,QAAI,CAACc,GAAL,EAAU;AAEV,QAAIG,MAAM,GAAG,IAAIb,YAAJ,CAAiB;AAC7Bc,MAAAA,MAAM,EAAE,IAAIZ,MAAJ,EADqB;AAE7Ba,MAAAA,MAAM,EAAE,UAAUC,MAAV,EAAkBC,UAAlB,EAA8BC,UAA9B,EAA0C;AACjD,YAAIC,cAAc,GAAGlB,eAAe,CAACe,MAAD,EAASE,UAAT,EAAqB,WAArB,CAApC;AACA,YAAIE,MAAM,GAAG,IAAIC,cAAJ,EAAb;AACAD,QAAAA,MAAM,CAACE,IAAP,CAAY,MAAZ,EAAoB,yCAApB;AACAF,QAAAA,MAAM,CAACG,gBAAP,CAAwB,MAAxB,EAAgC,YAAY;AAC3C,cAAIC,QAAQ,GAAG,IAAItB,MAAJ,GAAauB,YAAb,CAA0BL,MAAM,CAACM,YAAjC,EAA+C;AAC7DC,YAAAA,iBAAiB,EAAEjB,GAAG,CAACkB,OAAJ,GAAcC,aAAd;AAD0C,WAA/C,CAAf;AAGAhB,UAAAA,MAAM,CAACiB,WAAP,CAAmBN,QAAnB;AACA,SALD;AAMA,YAAIO,wBAAwB,GAAG,IAA/B;AACA,YAAIC,YAAY,GAAIb,cAAc,CAAC,CAAD,CAAd,GAAoBA,cAAc,CAAC,CAAD,CAAd,GAAoBY,wBAAzC,GAAqE,GAArE,IAA4EZ,cAAc,CAAC,CAAD,CAAd,GAAoBY,wBAApB,GAA+CZ,cAAc,CAAC,CAAD,CAAzI,IAAgJ,GAAhJ,IACjBA,cAAc,CAAC,CAAD,CAAd,GAAoBY,wBAApB,GAA+CZ,cAAc,CAAC,CAAD,CAD5C,IACmD,GADnD,IAC0DA,cAAc,CAAC,CAAD,CAAd,GAAoBA,cAAc,CAAC,CAAD,CAAd,GAAoBY,wBADlG,CAAnB;AAEA,YAAIE,KAAK,GAAG,oBAAoBD,YAApB,GAAmC,gCAA/C;AACAZ,QAAAA,MAAM,CAACc,IAAP,CAAYD,KAAZ;AACA,OAjB4B;AAkB7BE,MAAAA,QAAQ,EAAE/B;AAlBmB,KAAjB,CAAb;AAsBA,QAAIgC,WAAW,GAAG,IAAItC,aAAJ,CAAkB;AACnCe,MAAAA,MAAM,EAAEA,MAD2B;AAEnCwB,MAAAA,KAAK,EAAE9B;AAF4B,KAAlB,CAAlB;AAKAG,IAAAA,GAAG,CAAC4B,QAAJ,CAAaF,WAAb;AACAA,IAAAA,WAAW,CAACG,SAAZ,CAAsB9B,MAAtB;AAEA,WAAO,MAAM;AACZ,UAAIC,GAAJ,EAAS;AACRA,QAAAA,GAAG,CAAC8B,WAAJ,CAAgBJ,WAAhB;AACA;AACD,KAJD;AAKA,GAtCQ,EAsCN,CAAC1B,GAAD,CAtCM,CAAT;AAyCAd,EAAAA,SAAS,CAAC,MAAM;AACf,QAAI,CAACc,GAAL,EAAU;AACVA,IAAAA,GAAG,CAAC+B,EAAJ,CAAO,aAAP,EAAsB,UAAUC,CAAV,EAAa;AAClChC,MAAAA,GAAG,CAACiC,qBAAJ,CAA0BD,CAAC,CAACE,KAA5B,EAAmC,UAAUC,CAAV,EAAa;AAC/C,YAAIC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYnC,YAAZ,CAAX;AACA,YAAIqC,YAAY,GAAGH,CAAC,CAACI,MAArB;AACA,YAAIC,QAAQ,GAAGJ,IAAI,CAACK,OAAL,CAAaH,YAAb,CAAf;AACA,YAAII,iBAAiB,GAAGL,MAAM,CAACM,MAAP,CAAc,EAAd,EAAkB1C,YAAlB,CAAxB;;AACA,YAAIuC,QAAQ,GAAG,CAAf,EAAkB;AACjB,cAAII,QAAQ,GAAGT,CAAC,CAACU,WAAF,GAAgBC,gBAAhB,GAAmCC,cAAnC,GAAoD,CAApD,CAAf;AACA,cAAIC,SAAS,GAAGb,CAAC,CAACU,WAAF,GAAgBC,gBAAhB,GAAmCC,cAAnC,GAAoD,CAApD,CAAhB;AACA,cAAIE,IAAI,GAAGd,CAAC,CAACU,WAAF,GAAgBK,OAAhB,EAAX;AACAR,UAAAA,iBAAiB,CAACJ,YAAD,CAAjB,GAAkC;AAAE,wBAAYM,QAAd;AAAwB,yBAAaI,SAArC;AAAgD,oBAAQC;AAAxD,WAAlC;AACAd,UAAAA,CAAC,CAACgB,QAAF,CAAWrD,cAAX;AACAI,UAAAA,eAAe,CAACwC,iBAAD,CAAf;AACA,SAPD,MAOO;AACNP,UAAAA,CAAC,CAACgB,QAAF,CAAWtD,YAAX;AACA,iBAAO6C,iBAAiB,CAACJ,YAAD,CAAxB;AACApC,UAAAA,eAAe,CAACwC,iBAAD,CAAf;AAEA;AACD,OAlBD;AAmBA,KApBD;AAqBA,WAAO,MAAM;AACZ,UAAI1C,GAAJ,EAAS;AACRA,QAAAA,GAAG,CAACoD,mBAAJ,CAAwB,aAAxB;AACA;AACD,KAJD;AAKA,GA5BQ,EA4BN,CAACpD,GAAD,EAAMC,YAAN,CA5BM,CAAT;AA8BA,SAAO,IAAP;AACA,CA7ED;;AAgFA,eAAeL,WAAf","sourcesContent":["import { useContext, useEffect } from \"react\";\nimport MapContext from \"../Map/MapContext\";\nimport OLVectorLayer from \"ol/layer/Vector\";\nimport { Vector as VectorSource } from 'ol/source';\nimport { transformExtent } from 'ol/proj';\nimport OSMXML from 'ol/format/OSMXML';\nimport { bbox as bboxStrategy } from 'ol/loadingstrategy';\nimport BuildingListContext from \"../BuildingMenu/BuildingListContext\";\n\nconst VectorLayer = ({ defaultStyle, highlightStyle, zIndex = 1 }) => {\n\tconst { map } = useContext(MapContext);\n\tlet [buildingList, setBuildingList] = useContext(BuildingListContext);\n\n\n\tuseEffect(() => {\n\t\tif (!map) return;\n\n\t\tlet source = new VectorSource({\n\t\t\tformat: new OSMXML(),\n\t\t\tloader: function (extent, resolution, projection) {\n\t\t\t\tvar epsg4326Extent = transformExtent(extent, projection, 'EPSG:4326');\n\t\t\t\tvar client = new XMLHttpRequest();\n\t\t\t\tclient.open('POST', 'https://overpass-api.de/api/interpreter');\n\t\t\t\tclient.addEventListener('load', function () {\n\t\t\t\t\tvar features = new OSMXML().readFeatures(client.responseText, {\n\t\t\t\t\t\tfeatureProjection: map.getView().getProjection(),\n\t\t\t\t\t});\n\t\t\t\t\tsource.addFeatures(features);\n\t\t\t\t});\n\t\t\t\tvar extended_load_percentage = 0.02;\n\t\t\t\tvar stringExtent = (epsg4326Extent[1] - epsg4326Extent[1] * extended_load_percentage) + ',' + (epsg4326Extent[0] * extended_load_percentage + epsg4326Extent[0]) + ',' +\n\t\t\t\t\t(epsg4326Extent[3] * extended_load_percentage + epsg4326Extent[3]) + ',' + (epsg4326Extent[2] - epsg4326Extent[2] * extended_load_percentage);\n\t\t\t\tvar query = \"(way[building](\" + stringExtent + \");); out meta; >; out meta qt;\"\n\t\t\t\tclient.send(query);\n\t\t\t},\n\t\t\tstrategy: bboxStrategy,\n\n\t\t});\n\n\t\tlet vectorLayer = new OLVectorLayer({\n\t\t\tsource: source,\n\t\t\tstyle: defaultStyle\n\t\t});\n\n\t\tmap.addLayer(vectorLayer);\n\t\tvectorLayer.setZIndex(zIndex);\n\n\t\treturn () => {\n\t\t\tif (map) {\n\t\t\t\tmap.removeLayer(vectorLayer);\n\t\t\t}\n\t\t};\n\t}, [map]);\n\n\n\tuseEffect(() => {\n\t\tif (!map) return;\n\t\tmap.on('singleclick', function (e) {\n\t\t\tmap.forEachFeatureAtPixel(e.pixel, function (f) {\n\t\t\t\tvar keys = Object.keys(buildingList);\n\t\t\t\tvar buildingOlId = f.ol_uid;\n\t\t\t\tvar selIndex = keys.indexOf(buildingOlId);\n\t\t\t\tvar buildingListClone = Object.assign({}, buildingList);\n\t\t\t\tif (selIndex < 0) {\n\t\t\t\t\tvar latitude = f.getGeometry().getInteriorPoint().getCoordinates()[0];\n\t\t\t\t\tvar longitude = f.getGeometry().getInteriorPoint().getCoordinates()[1];\n\t\t\t\t\tvar area = f.getGeometry().getArea();\n\t\t\t\t\tbuildingListClone[buildingOlId] = { 'latitude': latitude, 'longitude': longitude, 'area': area };\n\t\t\t\t\tf.setStyle(highlightStyle);\n\t\t\t\t\tsetBuildingList(buildingListClone);\n\t\t\t\t} else {\n\t\t\t\t\tf.setStyle(defaultStyle);\n\t\t\t\t\tdelete buildingListClone[buildingOlId]\n\t\t\t\t\tsetBuildingList(buildingListClone);\n\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\treturn () => {\n\t\t\tif (map) {\n\t\t\t\tmap.removeEventListener('singleclick');\n\t\t\t}\n\t\t};\n\t}, [map, buildingList]);\n\n\treturn null;\n};\n\n\nexport default VectorLayer;"]},"metadata":{},"sourceType":"module"}