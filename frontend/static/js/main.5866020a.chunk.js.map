{"version":3,"sources":["Map/MapContext.js","Map/Map.js","Layers/Layers.js","Layers/VectorLayer.js","Layers/TileLayer.js","Source/xyz.js","Source/osm.js","Controls/Controls.js","Controls/FullScreenControl.js","App.js","serviceWorker.js","index.js"],"names":["MapContext","React","createContext","Map","children","zoom","center","mapRef","useRef","useState","map","setMap","useEffect","options","view","ol","layers","controls","overlays","mapObject","setTarget","current","undefined","getView","setZoom","setCenter","Provider","value","ref","className","Layers","VectorLayer","style","zIndex","useContext","source","VectorSource","format","OSMXML","loader","extent","resolution","projection","epsg4326Extent","transformExtent","client","XMLHttpRequest","open","addEventListener","features","readFeatures","responseText","featureProjection","getProjection","addFeatures","query","send","strategy","bboxStrategy","vectorLayer","OLVectorLayer","addLayer","setZIndex","removeLayer","TileLayer","tileLayer","OLTileLayer","xyz","osm","olSource","Controls","FullScreenControl","fullScreenControl","FullScreen","push","remove","styles","Style","image","CircleStyle","radius","fill","stroke","Stroke","color","lineDash","width","Fill","App","fromLonLat","MultiPolygon","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5866020a.chunk.js","sourcesContent":["import React from \"react\";\nconst MapContext = new React.createContext();\nexport default MapContext;\n","import React, { useRef, useState, useEffect } from \"react\"\nimport \"./Map.css\";\nimport MapContext from \"./MapContext\";\nimport * as ol from \"ol\";\n\nconst Map = ({ children, zoom, center }) => {\n\tconst mapRef = useRef();\n\tconst [map, setMap] = useState(null);\n\n\t// on component mount\n\tuseEffect(() => {\n\t\tlet options = {\n\t\t\tview: new ol.View({ zoom, center }),\n\t\t\tlayers: [],\n\t\t\tcontrols: [],\n\t\t\toverlays: []\n\t\t};\n\n\t\tlet mapObject = new ol.Map(options);\n\t\tmapObject.setTarget(mapRef.current);\n\t\tsetMap(mapObject);\n\n\t\treturn () => mapObject.setTarget(undefined);\n\t}, []);\n\n\t// zoom change handler\n\tuseEffect(() => {\n\t\tif (!map) return;\n\n\t\tmap.getView().setZoom(zoom);\n\t}, [zoom]);\n\n\t// center change handler\n\tuseEffect(() => {\n\t\tif (!map) return;\n\n\t\tmap.getView().setCenter(center)\n\t}, [center])\n\n\treturn (\n\t\t<MapContext.Provider value={{ map }}>\n\t\t\t<div ref={mapRef} className=\"ol-map\">\n\t\t\t\t{children}\n\t\t\t</div>\n\t\t</MapContext.Provider>\n\t)\n}\n\nexport default Map;","import React from \"react\";\n\nconst Layers = ({ children }) => {\n\treturn <div>{children}</div>;\n};\n\nexport default Layers;","import { useContext, useEffect } from \"react\";\nimport MapContext from \"../Map/MapContext\";\nimport OLVectorLayer from \"ol/layer/Vector\";\nimport { Vector as VectorSource } from 'ol/source';\nimport { transformExtent } from 'ol/proj';\nimport OSMXML from 'ol/format/OSMXML';\nimport { bbox as bboxStrategy } from 'ol/loadingstrategy';\n\nconst VectorLayer = ({ style, zIndex = 0 }) => {\n\tconst { map } = useContext(MapContext);\n\n\tlet source = new VectorSource({\n\t\tformat: new OSMXML(),\n\t\tloader: function (extent, resolution, projection) {\n\t\t\tvar epsg4326Extent = transformExtent(extent, projection, 'EPSG:4326');\n\t\t\tvar client = new XMLHttpRequest();\n\t\t\tclient.open('POST', 'https://overpass-api.de/api/interpreter');\n\t\t\tclient.addEventListener('load', function () {\n\t\t\t\tvar features = new OSMXML().readFeatures(client.responseText, {\n\t\t\t\t\tfeatureProjection: map.getView().getProjection(),\n\t\t\t\t});\n\t\t\t\tsource.addFeatures(features);\n\t\t\t});\n\t\t\tvar extended_load_percentage = 0.02;\n\t\t\tvar stringExtent = (epsg4326Extent[1] - epsg4326Extent[1] * extended_load_percentage) + ',' + (epsg4326Extent[0] * extended_load_percentage + epsg4326Extent[0]) + ',' +\n\t\t\t\t(epsg4326Extent[3] * extended_load_percentage + epsg4326Extent[3]) + ',' + (epsg4326Extent[2] - epsg4326Extent[2] * extended_load_percentage);\n\t\t\tvar query = \"(way[building](\" + stringExtent + \");); out meta; >; out meta qt;\"\n\t\t\tclient.send(query);\n\t\t},\n\t\tstrategy: bboxStrategy,\n\n\t});\n\n\n\tuseEffect(() => {\n\t\tif (!map) return;\n\n\t\tlet vectorLayer = new OLVectorLayer({\n\t\t\tsource,\n\t\t\tstyle\n\t\t});\n\n\t\tmap.addLayer(vectorLayer);\n\t\tvectorLayer.setZIndex(zIndex);\n\n\t\treturn () => {\n\t\t\tif (map) {\n\t\t\t\tmap.removeLayer(vectorLayer);\n\t\t\t}\n\t\t};\n\t}, [map]);\n\n\treturn null;\n};\n\nexport default VectorLayer;","import { useContext, useEffect } from \"react\";\nimport MapContext from \"../Map/MapContext\";\nimport OLTileLayer from \"ol/layer/Tile\";\n\nconst TileLayer = ({ source, zIndex = 0 }) => {\n\tconst { map } = useContext(MapContext);\n\n\tuseEffect(() => {\n\t\tif (!map) return;\n\n\t\tlet tileLayer = new OLTileLayer({\n\t\t\tsource,\n\t\t\tzIndex,\n\t\t});\n\n\t\tmap.addLayer(tileLayer);\n\t\ttileLayer.setZIndex(zIndex);\n\n\t\treturn () => {\n\t\t\tif (map) {\n\t\t\t\tmap.removeLayer(tileLayer);\n\t\t\t}\n\t\t};\n\t}, [map]);\n\n\treturn null;\n};\n\nexport default TileLayer;\n","import * as olSource from \"ol/source\";\n\nfunction xyz({ url, attributions, maxZoom }) {\n\treturn new olSource.XYZ({ url, attributions, maxZoom });\n}\n\nexport default xyz;\n","import * as olSource from \"ol/source\";\n\nfunction osm() {\n\treturn new olSource.OSM();\n}\n\nexport default osm;","import React from \"react\";\n\nconst Controls = ({ children }) => {\n\treturn <div>{children}</div>;\n};\n\nexport default Controls;\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { FullScreen } from \"ol/control\";\nimport MapContext from \"../Map/MapContext\";\n\nconst FullScreenControl = () => {\n\tconst { map } = useContext(MapContext);\n\n\tuseEffect(() => {\n\t\tif (!map) return;\n\n\t\tlet fullScreenControl = new FullScreen({});\n\n\t\tmap.controls.push(fullScreenControl);\n\n\t\treturn () => map.controls.remove(fullScreenControl);\n\t}, [map]);\n\n\treturn null;\n};\n\nexport default FullScreenControl;","import React, { useState } from 'react';\nimport './App.css';\nimport Map from \"./Map\";\nimport { Layers, TileLayer, VectorLayer } from \"./Layers\";\nimport { Circle as CircleStyle, Fill, Stroke, Style } from 'ol/style';\nimport { osm, vector } from \"./Source\";\nimport { fromLonLat, get } from 'ol/proj';\nimport GeoJSON from 'ol/format/GeoJSON';\nimport { Controls, FullScreenControl } from \"./Controls\";\n\nlet styles = {\n\t'Point': new Style({\n\t\timage: new CircleStyle({\n\t\t\tradius: 10,\n\t\t\tfill: null,\n\t\t\tstroke: new Stroke({\n\t\t\t\tcolor: 'magenta',\n\t\t\t}),\n\t\t}),\n\t}),\n\t'Polygon': new Style({\n\t\tstroke: new Stroke({\n\t\t\tcolor: 'blue',\n\t\t\tlineDash: [4],\n\t\t\twidth: 3,\n\t\t}),\n\t\tfill: new Fill({\n\t\t\tcolor: 'rgba(0, 0, 255, 0.1)',\n\t\t}),\n\t}),\n\t'MultiPolygon': new Style({\n\t\tstroke: new Stroke({\n\t\t\tcolor: 'yellow',\n\t\t\twidth: 1,\n\t\t}),\n\t\tfill: new Fill({\n\t\t\tcolor: 'rgba(0, 0, 255, 0.1)',\n\t\t}),\n\t}),\n};\n\nconst geojsonObject = {\n\t\"type\": \"FeatureCollection\",\n\t\"features\": [\n\t\t{\n\t\t\t\"type\": \"Feature\",\n\t\t\t\"properties\": {\n\t\t\t\t\"kind\": \"county\",\n\t\t\t\t\"name\": \"Wyandotte\",\n\t\t\t\t\"state\": \"KS\"\n\t\t\t},\n\t\t\t\"geometry\": {\n\t\t\t\t\"type\": \"MultiPolygon\",\n\t\t\t\t\"coordinates\": [\n\t\t\t\t\t[\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t-94.8627,\n\t\t\t\t\t\t\t\t39.202\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t-94.901,\n\t\t\t\t\t\t\t\t39.202\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t-94.9065,\n\t\t\t\t\t\t\t\t38.9884\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t-94.8682,\n\t\t\t\t\t\t\t\t39.0596\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t-94.6053,\n\t\t\t\t\t\t\t\t39.0432\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t-94.6053,\n\t\t\t\t\t\t\t\t39.1144\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t-94.5998,\n\t\t\t\t\t\t\t\t39.1582\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t-94.7422,\n\t\t\t\t\t\t\t\t39.1691\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t-94.7751,\n\t\t\t\t\t\t\t\t39.202\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t-94.8627,\n\t\t\t\t\t\t\t\t39.202\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t]\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t]\n};\nconst geojsonObject2 = {\n\t\"type\": \"FeatureCollection\",\n\t\"features\": [\n\t\t{\n\t\t\t\"type\": \"Feature\",\n\t\t\t\"properties\": {\n\t\t\t\t\"kind\": \"county\",\n\t\t\t\t\"name\": \"Johnson\",\n\t\t\t\t\"state\": \"KS\"\n\t\t\t},\n\t\t\t\"geometry\": {\n\t\t\t\t\"type\": \"MultiPolygon\",\n\t\t\t\t\"coordinates\": [\n\t\t\t\t\t[\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t-94.9065,\n\t\t\t\t\t\t\t\t38.9884\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t-95.0544,\n\t\t\t\t\t\t\t\t38.9829\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t-95.0544,\n\t\t\t\t\t\t\t\t38.7365\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t-94.9668,\n\t\t\t\t\t\t\t\t38.7365\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t-94.6108,\n\t\t\t\t\t\t\t\t38.7365\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t-94.6108,\n\t\t\t\t\t\t\t\t38.846\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t-94.6053,\n\t\t\t\t\t\t\t\t39.0432\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t-94.8682,\n\t\t\t\t\t\t\t\t39.0596\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t-94.9065,\n\t\t\t\t\t\t\t\t38.9884\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t]\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t]\n};\n\nconst App = () => {\n\tconst [center, setCenter] = useState([-3.92907, 38.98626]);\n\tconst [zoom, setZoom] = useState(9);\n\treturn (\n\t\t<div>\n\t\t\t<Map center={fromLonLat(center)} zoom={zoom}>\n\t\t\t\t<Layers>\n\t\t\t\t\t<TileLayer\n\t\t\t\t\t\tsource={osm()}\n\t\t\t\t\t\tzIndex={0}\n\t\t\t\t\t/>\n\t\t\t\t\t{\n\t\t\t\t\t\t<VectorLayer\n\t\t\t\t\t\t\tstyle={styles.MultiPolygon}\n\t\t\t\t\t\t/>\n\t\t\t\t\t}\n\n\t\t\t\t</Layers>\n\t\t\t\t<Controls>\n\t\t\t\t\t<FullScreenControl />\n\t\t\t\t</Controls>\n\t\t\t</Map>\n\t\t</div>\n\t)\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}