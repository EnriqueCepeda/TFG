{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/format/OSMXML\n */\n// FIXME add typedef for stack state objects\n\n\nimport Feature from '../Feature.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport LineString from '../geom/LineString.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport XMLFeature from './XMLFeature.js';\nimport { extend } from '../array.js';\nimport { get as getProjection } from '../proj.js';\nimport { isEmpty } from '../obj.js';\nimport { makeStructureNS, pushParseAndPop } from '../xml.js';\nimport { transformGeometryWithOptions } from './Feature.js';\n/**\n * @const\n * @type {Array<null>}\n */\n\nvar NAMESPACE_URIS = [null];\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\n\nvar WAY_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'nd': readNd,\n  'tag': readTag\n});\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\n\nvar PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'node': readNode,\n  'way': readWay\n});\n/**\n * @classdesc\n * Feature format for reading data in the\n * [OSMXML format](http://wiki.openstreetmap.org/wiki/OSM_XML).\n *\n * @api\n */\n\nvar OSMXML =\n/** @class */\nfunction (_super) {\n  __extends(OSMXML, _super);\n\n  function OSMXML() {\n    var _this = _super.call(this) || this;\n    /**\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n\n\n    _this.dataProjection = getProjection('EPSG:4326');\n    return _this;\n  }\n  /**\n   * @protected\n   * @param {Element} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions=} opt_options Options.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   */\n\n\n  OSMXML.prototype.readFeaturesFromNode = function (node, opt_options) {\n    var options = this.getReadOptions(node, opt_options);\n\n    if (node.localName == 'osm') {\n      var state = pushParseAndPop({\n        nodes: {},\n        ways: [],\n        features: []\n      }, PARSERS, node, [options]); // parse nodes in ways\n\n      for (var j = 0; j < state.ways.length; j++) {\n        var values =\n        /** @type {Object} */\n        state.ways[j];\n        /** @type {Array<number>} */\n\n        var flatCoordinates = [];\n\n        for (var i = 0, ii = values.ndrefs.length; i < ii; i++) {\n          var point = state.nodes[values.ndrefs[i]];\n          extend(flatCoordinates, point);\n        }\n\n        var geometry = void 0;\n\n        if (values.ndrefs[0] == values.ndrefs[values.ndrefs.length - 1]) {\n          // closed way\n          geometry = new Polygon(flatCoordinates, GeometryLayout.XY, [flatCoordinates.length]);\n        } else {\n          geometry = new LineString(flatCoordinates, GeometryLayout.XY);\n        }\n\n        transformGeometryWithOptions(geometry, false, options);\n        var feature = new Feature(geometry);\n        feature.setId(values.id);\n        feature.setProperties(values.tags, true);\n        state.features.push(feature);\n      }\n\n      if (state.features) {\n        return state.features;\n      }\n    }\n\n    return [];\n  };\n\n  return OSMXML;\n}(XMLFeature);\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\n\n\nvar NODE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'tag': readTag\n});\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\n\nfunction readNode(node, objectStack) {\n  var options =\n  /** @type {import(\"./Feature.js\").ReadOptions} */\n  objectStack[0];\n  var state =\n  /** @type {Object} */\n  objectStack[objectStack.length - 1];\n  var id = node.getAttribute('id');\n  /** @type {import(\"../coordinate.js\").Coordinate} */\n\n  var coordinates = [parseFloat(node.getAttribute('lon')), parseFloat(node.getAttribute('lat'))];\n  state.nodes[id] = coordinates;\n  var values = pushParseAndPop({\n    tags: {}\n  }, NODE_PARSERS, node, objectStack);\n\n  if (!isEmpty(values.tags)) {\n    var geometry = new Point(coordinates);\n    transformGeometryWithOptions(geometry, false, options);\n    var feature = new Feature(geometry);\n    feature.setId(id);\n    feature.setProperties(values.tags, true);\n    state.features.push(feature);\n  }\n}\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\n\n\nfunction readWay(node, objectStack) {\n  var id = node.getAttribute('id');\n  var values = pushParseAndPop({\n    id: id,\n    ndrefs: [],\n    tags: {}\n  }, WAY_PARSERS, node, objectStack);\n  var state =\n  /** @type {Object} */\n  objectStack[objectStack.length - 1];\n  state.ways.push(values);\n}\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\n\n\nfunction readNd(node, objectStack) {\n  var values =\n  /** @type {Object} */\n  objectStack[objectStack.length - 1];\n  values.ndrefs.push(node.getAttribute('ref'));\n}\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\n\n\nfunction readTag(node, objectStack) {\n  var values =\n  /** @type {Object} */\n  objectStack[objectStack.length - 1];\n  values.tags[node.getAttribute('k')] = node.getAttribute('v');\n}\n\nexport default OSMXML;","map":{"version":3,"sources":["../src/format/OSMXML.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/format/OSMXML\n */\n// FIXME add typedef for stack state objects\nimport Feature from '../Feature.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport LineString from '../geom/LineString.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport XMLFeature from './XMLFeature.js';\nimport { extend } from '../array.js';\nimport { get as getProjection } from '../proj.js';\nimport { isEmpty } from '../obj.js';\nimport { makeStructureNS, pushParseAndPop } from '../xml.js';\nimport { transformGeometryWithOptions } from './Feature.js';\n/**\n * @const\n * @type {Array<null>}\n */\nvar NAMESPACE_URIS = [null];\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nvar WAY_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n    'nd': readNd,\n    'tag': readTag,\n});\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nvar PARSERS = makeStructureNS(NAMESPACE_URIS, {\n    'node': readNode,\n    'way': readWay,\n});\n/**\n * @classdesc\n * Feature format for reading data in the\n * [OSMXML format](http://wiki.openstreetmap.org/wiki/OSM_XML).\n *\n * @api\n */\nvar OSMXML = /** @class */ (function (_super) {\n    __extends(OSMXML, _super);\n    function OSMXML() {\n        var _this = _super.call(this) || this;\n        /**\n         * @type {import(\"../proj/Projection.js\").default}\n         */\n        _this.dataProjection = getProjection('EPSG:4326');\n        return _this;\n    }\n    /**\n     * @protected\n     * @param {Element} node Node.\n     * @param {import(\"./Feature.js\").ReadOptions=} opt_options Options.\n     * @return {Array<import(\"../Feature.js\").default>} Features.\n     */\n    OSMXML.prototype.readFeaturesFromNode = function (node, opt_options) {\n        var options = this.getReadOptions(node, opt_options);\n        if (node.localName == 'osm') {\n            var state = pushParseAndPop({\n                nodes: {},\n                ways: [],\n                features: [],\n            }, PARSERS, node, [options]);\n            // parse nodes in ways\n            for (var j = 0; j < state.ways.length; j++) {\n                var values = /** @type {Object} */ (state.ways[j]);\n                /** @type {Array<number>} */\n                var flatCoordinates = [];\n                for (var i = 0, ii = values.ndrefs.length; i < ii; i++) {\n                    var point = state.nodes[values.ndrefs[i]];\n                    extend(flatCoordinates, point);\n                }\n                var geometry = void 0;\n                if (values.ndrefs[0] == values.ndrefs[values.ndrefs.length - 1]) {\n                    // closed way\n                    geometry = new Polygon(flatCoordinates, GeometryLayout.XY, [\n                        flatCoordinates.length,\n                    ]);\n                }\n                else {\n                    geometry = new LineString(flatCoordinates, GeometryLayout.XY);\n                }\n                transformGeometryWithOptions(geometry, false, options);\n                var feature = new Feature(geometry);\n                feature.setId(values.id);\n                feature.setProperties(values.tags, true);\n                state.features.push(feature);\n            }\n            if (state.features) {\n                return state.features;\n            }\n        }\n        return [];\n    };\n    return OSMXML;\n}(XMLFeature));\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nvar NODE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n    'tag': readTag,\n});\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction readNode(node, objectStack) {\n    var options = /** @type {import(\"./Feature.js\").ReadOptions} */ (objectStack[0]);\n    var state = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n    var id = node.getAttribute('id');\n    /** @type {import(\"../coordinate.js\").Coordinate} */\n    var coordinates = [\n        parseFloat(node.getAttribute('lon')),\n        parseFloat(node.getAttribute('lat')),\n    ];\n    state.nodes[id] = coordinates;\n    var values = pushParseAndPop({\n        tags: {},\n    }, NODE_PARSERS, node, objectStack);\n    if (!isEmpty(values.tags)) {\n        var geometry = new Point(coordinates);\n        transformGeometryWithOptions(geometry, false, options);\n        var feature = new Feature(geometry);\n        feature.setId(id);\n        feature.setProperties(values.tags, true);\n        state.features.push(feature);\n    }\n}\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction readWay(node, objectStack) {\n    var id = node.getAttribute('id');\n    var values = pushParseAndPop({\n        id: id,\n        ndrefs: [],\n        tags: {},\n    }, WAY_PARSERS, node, objectStack);\n    var state = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n    state.ways.push(values);\n}\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction readNd(node, objectStack) {\n    var values = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n    values.ndrefs.push(node.getAttribute('ref'));\n}\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction readTag(node, objectStack) {\n    var values = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n    values.tags[node.getAttribute('k')] = node.getAttribute('v');\n}\nexport default OSMXML;\n//# sourceMappingURL=OSMXML.js.map"]},"metadata":{},"sourceType":"module"}